#pragma once
#include "messages.hpp"
#include <boost/describe.hpp>


// auto generated by cme_gen(WIP) from : https://www.cmegroup.com/ftp/SBEFix/Production/Templates/templates_FixBinary.xml

namespace cme::mdp3::v13 {

BOOST_DESCRIBE_STRUCT(Decimal9, (), (
	mantissa,
))

BOOST_DESCRIBE_STRUCT(Decimal9NULL, (), (
	mantissa,
))

BOOST_DESCRIBE_STRUCT(DecimalQty, (), (
	mantissa,
))

BOOST_DESCRIBE_STRUCT(MaturityMonthYear, (), (
	year,
	month,
	day,
	week,
))

BOOST_DESCRIBE_STRUCT(PRICE9, (), (
	mantissa,
))

BOOST_DESCRIBE_STRUCT(PRICENULL9, (), (
	mantissa,
))

BOOST_DESCRIBE_STRUCT(groupSize, (), (
	blockLength,
	numInGroup,
))

BOOST_DESCRIBE_STRUCT(groupSize8Byte, (), (
	blockLength,
	padding_1,
	numInGroup,
))

BOOST_DESCRIBE_STRUCT(groupSizeEncoding, (), (
	blockLength,
	numInGroup,
))

BOOST_DESCRIBE_STRUCT(messageHeader, (), (
	blockLength,
	templateId,
	schemaId,
	version,
))

BOOST_DESCRIBE_ENUM(AggressorFlag,NotAggressor,Aggressor,)
BOOST_DESCRIBE_ENUM(AggressorSide,NoAggressor,Buy,Sell,)
BOOST_DESCRIBE_ENUM(EventType,Activation,LastEligibleTradeDate,)
BOOST_DESCRIBE_ENUM(HaltReason,GroupSchedule,SurveillanceIntervention,MarketEvent,InstrumentActivation,InstrumentExpiration,Unknown,RecoveryInProcess,TradeDateRoll,)
BOOST_DESCRIBE_ENUM(LegSide,BuySide,SellSide,)
BOOST_DESCRIBE_ENUM(MDEntryType,Bid,Offer,Trade,OpenPrice,SettlementPrice,TradingSessionHighPrice,TradingSessionLowPrice,VWAP,ClearedVolume,OpenInterest,ImpliedBid,ImpliedOffer,BookReset,SessionHighBid,SessionLowOffer,FixingPrice,ElectronicVolume,ThresholdLimitsandPriceBandVariation,MarketBestOffer,MarketBestBid,)
BOOST_DESCRIBE_ENUM(MDEntryTypeBook,Bid,Offer,ImpliedBid,ImpliedOffer,BookReset,MarketBestOffer,MarketBestBid,)
BOOST_DESCRIBE_ENUM(MDEntryTypeDailyStatistics,SettlementPrice,ClearedVolume,OpenInterest,FixingPrice,)
BOOST_DESCRIBE_ENUM(MDEntryTypeStatistics,OpenPrice,HighTrade,LowTrade,VWAP,HighestBid,LowestOffer,)
BOOST_DESCRIBE_ENUM(MDUpdateAction,New,Change,Delete,DeleteThru,DeleteFrom,Overlay,)
BOOST_DESCRIBE_ENUM(MoneyOrPar,Money,Par,)
BOOST_DESCRIBE_ENUM(OpenCloseSettlFlag,DailyOpenPrice,IndicativeOpeningPrice,IntradayVWAP,RepoAverage8_30AM,RepoAverage10AM,PrevSessionRepoAverage10AM,)
BOOST_DESCRIBE_ENUM(OrderUpdateAction,New,Update,Delete,)
BOOST_DESCRIBE_ENUM(PriceSource,MarketPlaceAssistant,Globex,Refinitiv,ICAP,)
BOOST_DESCRIBE_ENUM(PutOrCall,Put,Call,)
BOOST_DESCRIBE_ENUM(RepoSubType,Special,GC,GCForDBV,)
BOOST_DESCRIBE_ENUM(SecurityAltIDSource,CUSIP,ISIN,)
BOOST_DESCRIBE_ENUM(SecurityTradingEvent,NoEvent,NoCancel,ResetStatistics,ImpliedMatchingON,ImpliedMatchingOFF,EndOfWorkup,)
BOOST_DESCRIBE_ENUM(SecurityTradingStatus,TradingHalt,Close,NewPriceIndication,ReadyToTrade,NotAvailableForTrading,UnknownorInvalid,PreOpen,PreCross,Cross,PostClose,NoChange,PrivateWorkup,PublicWorkup,)
BOOST_DESCRIBE_ENUM(SecurityUpdateAction,Add,Delete,Modify,)
BOOST_DESCRIBE_ENUM(Side,Buy,Sell,)
BOOST_DESCRIBE_ENUM(WorkupTradingStatus,ReadyToTrade,NotAvailableForTrading,PrivateWorkup,PublicWorkup,)
BOOST_DESCRIBE_ENUM(InstAttribValue,ElectronicMatchEligible,OrderCrossEligible,BlockTradeEligible,EFPEligible,EBFEligible,EFSEligible,EFREligible,OTCEligible,iLinkIndicativeMassQuotingEligible,NegativeStrikeEligible,NegativePriceOutrightEligible,IsFractional,VolatilityQuotedOption,RFQCrossEligible,ZeroPriceOutrightEligible,DecayingProductEligibility,VariableProductEligibility,DailyProductEligibility,GTOrdersEligibility,ImpliedMatchingEligibility,TriangulationEligible,VariableCabEligible,InvertedBook,IsAoNInstrument,SEFRegulated,MTFRegulated,eFIXInstrument,HedgeInstrument,)
BOOST_DESCRIBE_ENUM(MatchEventIndicator,LastTradeMsg,LastVolumeMsg,LastQuoteMsg,LastStatsMsg,LastImpliedMsg,RecoveryMsg,Reserved,EndOfEvent,)
BOOST_DESCRIBE_ENUM(SettlPriceType,FinalDaily,Actual,Rounded,Intraday,ReservedBits,NullValue,)
BOOST_DESCRIBE_STRUCT(ChannelReset4, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(ChannelReset4::NoMDEntries, (), (
	applID,
))

BOOST_DESCRIBE_STRUCT(AdminHeartbeat12, (), (
	msg_size,
	message_header,
))

BOOST_DESCRIBE_STRUCT(AdminLogin15, (), (
	msg_size,
	message_header,
	heartBtInt,
))

BOOST_DESCRIBE_STRUCT(AdminLogout16, (), (
	msg_size,
	message_header,
	text,
))

BOOST_DESCRIBE_STRUCT(SecurityStatus30, (), (
	msg_size,
	message_header,
	transactTime,
	securityGroup,
	asset,
	securityID,
	tradeDate,
	matchEventIndicator,
	securityTradingStatus,
	haltReason,
	securityTradingEvent,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshVolume37, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	block_padding,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshVolume37::NoMDEntries, (), (
	mDEntrySize,
	securityID,
	rptSeq,
	mDUpdateAction,
	padding,
))

BOOST_DESCRIBE_STRUCT(QuoteRequest39, (), (
	msg_size,
	message_header,
	transactTime,
	quoteReqID,
	matchEventIndicator,
	block_padding,
	noRelatedSym,
 ))

BOOST_DESCRIBE_STRUCT(QuoteRequest39::NoRelatedSym, (), (
	symbol,
	securityID,
	orderQty,
	quoteType,
	side,
	padding,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshBook46, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	block_padding,
	noMDEntries,
 	noOrderIDEntries,
 ))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshBook46::NoMDEntries, (), (
	mDEntryPx,
	mDEntrySize,
	securityID,
	rptSeq,
	numberOfOrders,
	mDPriceLevel,
	mDUpdateAction,
	mDEntryType,
	tradeableSize,
	padding,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshBook46::NoOrderIDEntries, (), (
	orderID,
	mDOrderPriority,
	mDDisplayQty,
	referenceID,
	orderUpdateAction,
	padding,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshOrderBook47, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	block_padding,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshOrderBook47::NoMDEntries, (), (
	orderID,
	mDOrderPriority,
	mDEntryPx,
	mDDisplayQty,
	securityID,
	mDUpdateAction,
	mDEntryType,
	padding,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshTradeSummary48, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	block_padding,
	noMDEntries,
 	noOrderIDEntries,
 ))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshTradeSummary48::NoMDEntries, (), (
	mDEntryPx,
	mDEntrySize,
	securityID,
	rptSeq,
	numberOfOrders,
	aggressorSide,
	mDUpdateAction,
	mDTradeEntryID,
	padding,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshTradeSummary48::NoOrderIDEntries, (), (
	orderID,
	lastQty,
	padding,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshDailyStatistics49, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	block_padding,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshDailyStatistics49::NoMDEntries, (), (
	mDEntryPx,
	mDEntrySize,
	securityID,
	rptSeq,
	tradingReferenceDate,
	settlPriceType,
	mDUpdateAction,
	mDEntryType,
	padding,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshLimitsBanding50, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	block_padding,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshLimitsBanding50::NoMDEntries, (), (
	highLimitPrice,
	lowLimitPrice,
	maxPriceVariation,
	securityID,
	rptSeq,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshSessionStatistics51, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	block_padding,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshSessionStatistics51::NoMDEntries, (), (
	mDEntryPx,
	securityID,
	rptSeq,
	openCloseSettlFlag,
	mDUpdateAction,
	mDEntryType,
	mDEntrySize,
	padding,
))

BOOST_DESCRIBE_STRUCT(SnapshotFullRefresh52, (), (
	msg_size,
	message_header,
	lastMsgSeqNumProcessed,
	totNumReports,
	securityID,
	rptSeq,
	transactTime,
	lastUpdateTime,
	tradeDate,
	mDSecurityTradingStatus,
	highLimitPrice,
	lowLimitPrice,
	maxPriceVariation,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(SnapshotFullRefresh52::NoMDEntries, (), (
	mDEntryPx,
	mDEntrySize,
	numberOfOrders,
	mDPriceLevel,
	tradingReferenceDate,
	openCloseSettlFlag,
	settlPriceType,
	mDEntryType,
))

BOOST_DESCRIBE_STRUCT(SnapshotFullRefreshOrderBook53, (), (
	msg_size,
	message_header,
	lastMsgSeqNumProcessed,
	totNumReports,
	securityID,
	noChunks,
	currentChunk,
	transactTime,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(SnapshotFullRefreshOrderBook53::NoMDEntries, (), (
	orderID,
	mDOrderPriority,
	mDEntryPx,
	mDDisplayQty,
	mDEntryType,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFuture54, (), (
	msg_size,
	message_header,
	matchEventIndicator,
	totNumReports,
	securityUpdateAction,
	lastUpdateTime,
	mDSecurityTradingStatus,
	applID,
	marketSegmentID,
	underlyingProduct,
	securityExchange,
	securityGroup,
	asset,
	symbol,
	securityID,
	securityType,
	cFICode,
	maturityMonthYear,
	currency,
	settlCurrency,
	matchAlgorithm,
	minTradeVol,
	maxTradeVol,
	minPriceIncrement,
	displayFactor,
	mainFraction,
	subFraction,
	priceDisplayFormat,
	unitOfMeasure,
	unitOfMeasureQty,
	tradingReferencePrice,
	settlPriceType,
	openInterestQty,
	clearedVolume,
	highLimitPrice,
	lowLimitPrice,
	maxPriceVariation,
	decayQuantity,
	decayStartDate,
	originalContractSize,
	contractMultiplier,
	contractMultiplierUnit,
	flowScheduleType,
	minPriceIncrementAmount,
	userDefinedInstrument,
	tradingReferenceDate,
	instrumentGUID,
	noEvents,
 	noMDFeedTypes,
 	noInstAttrib,
 	noLotTypeRules,
 ))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFuture54::NoEvents, (), (
	eventType,
	eventTime,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFuture54::NoMDFeedTypes, (), (
	mDFeedType,
	marketDepth,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFuture54::NoInstAttrib, (), (
	instAttribValue,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFuture54::NoLotTypeRules, (), (
	lotType,
	minLotSize,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionOption55, (), (
	msg_size,
	message_header,
	matchEventIndicator,
	totNumReports,
	securityUpdateAction,
	lastUpdateTime,
	mDSecurityTradingStatus,
	applID,
	marketSegmentID,
	underlyingProduct,
	securityExchange,
	securityGroup,
	asset,
	symbol,
	securityID,
	securityType,
	cFICode,
	putOrCall,
	maturityMonthYear,
	currency,
	strikePrice,
	strikeCurrency,
	settlCurrency,
	minCabPrice,
	matchAlgorithm,
	minTradeVol,
	maxTradeVol,
	minPriceIncrement,
	minPriceIncrementAmount,
	displayFactor,
	tickRule,
	mainFraction,
	subFraction,
	priceDisplayFormat,
	unitOfMeasure,
	unitOfMeasureQty,
	tradingReferencePrice,
	settlPriceType,
	clearedVolume,
	openInterestQty,
	lowLimitPrice,
	highLimitPrice,
	userDefinedInstrument,
	tradingReferenceDate,
	instrumentGUID,
	noEvents,
 	noMDFeedTypes,
 	noInstAttrib,
 	noLotTypeRules,
 	noUnderlyings,
 	noRelatedInstruments,
 ))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionOption55::NoEvents, (), (
	eventType,
	eventTime,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionOption55::NoMDFeedTypes, (), (
	mDFeedType,
	marketDepth,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionOption55::NoInstAttrib, (), (
	instAttribValue,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionOption55::NoLotTypeRules, (), (
	lotType,
	minLotSize,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionOption55::NoUnderlyings, (), (
	underlyingSecurityID,
	underlyingSymbol,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionOption55::NoRelatedInstruments, (), (
	relatedSecurityID,
	relatedSymbol,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionSpread56, (), (
	msg_size,
	message_header,
	matchEventIndicator,
	totNumReports,
	securityUpdateAction,
	lastUpdateTime,
	mDSecurityTradingStatus,
	applID,
	marketSegmentID,
	underlyingProduct,
	securityExchange,
	securityGroup,
	asset,
	symbol,
	securityID,
	securityType,
	cFICode,
	maturityMonthYear,
	currency,
	securitySubType,
	userDefinedInstrument,
	matchAlgorithm,
	minTradeVol,
	maxTradeVol,
	minPriceIncrement,
	displayFactor,
	priceDisplayFormat,
	priceRatio,
	tickRule,
	unitOfMeasure,
	tradingReferencePrice,
	settlPriceType,
	openInterestQty,
	clearedVolume,
	highLimitPrice,
	lowLimitPrice,
	maxPriceVariation,
	mainFraction,
	subFraction,
	tradingReferenceDate,
	priceQuoteMethod,
	riskSet,
	marketSet,
	instrumentGUID,
	financialInstrumentFullName,
	noEvents,
 	noMDFeedTypes,
 	noInstAttrib,
 	noLotTypeRules,
 	noLegs,
 ))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionSpread56::NoEvents, (), (
	eventType,
	eventTime,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionSpread56::NoMDFeedTypes, (), (
	mDFeedType,
	marketDepth,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionSpread56::NoInstAttrib, (), (
	instAttribValue,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionSpread56::NoLotTypeRules, (), (
	lotType,
	minLotSize,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionSpread56::NoLegs, (), (
	legSecurityID,
	legSide,
	legRatioQty,
	legPrice,
	legOptionDelta,
))


//================MDInstrumentDefinitionFixedIncome57=========================
__attribute__((unused)) inline auto boost_base_descriptor_fn(MDInstrumentDefinitionFixedIncome57**) {
   return typename boost::describe::detail::bases_descriptor_impl<MDInstrumentDefinitionFixedIncome57, boost::describe::detail::list<>>::type();
}
__attribute__((unused)) inline auto boost_protected_member_descriptor_fn(MDInstrumentDefinitionFixedIncome57**) {
    return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_public>( 0 );
}
__attribute__((unused)) inline auto boost_private_member_descriptor_fn(MDInstrumentDefinitionFixedIncome57**) {
    return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_public>( 0 );
}
__attribute__((unused)) inline auto boost_public_member_descriptor_fn(MDInstrumentDefinitionFixedIncome57**) {
    return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_public>( 0 ,

       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::msg_size; }
            static constexpr auto name() noexcept { return "msg_size"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::message_header; }
            static constexpr auto name() noexcept { return "message_header"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::matchEventIndicator; }
            static constexpr auto name() noexcept { return "matchEventIndicator"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::totNumReports; }
            static constexpr auto name() noexcept { return "totNumReports"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::securityUpdateAction; }
            static constexpr auto name() noexcept { return "securityUpdateAction"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::lastUpdateTime; }
            static constexpr auto name() noexcept { return "lastUpdateTime"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::mDSecurityTradingStatus; }
            static constexpr auto name() noexcept { return "mDSecurityTradingStatus"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::applID; }
            static constexpr auto name() noexcept { return "applID"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::marketSegmentID; }
            static constexpr auto name() noexcept { return "marketSegmentID"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::underlyingProduct; }
            static constexpr auto name() noexcept { return "underlyingProduct"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::securityExchange; }
            static constexpr auto name() noexcept { return "securityExchange"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::securityGroup; }
            static constexpr auto name() noexcept { return "securityGroup"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::asset; }
            static constexpr auto name() noexcept { return "asset"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::symbol; }
            static constexpr auto name() noexcept { return "symbol"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::securityID; }
            static constexpr auto name() noexcept { return "securityID"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::securityType; }
            static constexpr auto name() noexcept { return "securityType"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::cFICode; }
            static constexpr auto name() noexcept { return "cFICode"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::currency; }
            static constexpr auto name() noexcept { return "currency"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::settlCurrency; }
            static constexpr auto name() noexcept { return "settlCurrency"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::matchAlgorithm; }
            static constexpr auto name() noexcept { return "matchAlgorithm"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::minTradeVol; }
            static constexpr auto name() noexcept { return "minTradeVol"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::maxTradeVol; }
            static constexpr auto name() noexcept { return "maxTradeVol"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::minPriceIncrement; }
            static constexpr auto name() noexcept { return "minPriceIncrement"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::displayFactor; }
            static constexpr auto name() noexcept { return "displayFactor"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::mainFraction; }
            static constexpr auto name() noexcept { return "mainFraction"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::subFraction; }
            static constexpr auto name() noexcept { return "subFraction"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::priceDisplayFormat; }
            static constexpr auto name() noexcept { return "priceDisplayFormat"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::unitOfMeasure; }
            static constexpr auto name() noexcept { return "unitOfMeasure"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::unitOfMeasureQty; }
            static constexpr auto name() noexcept { return "unitOfMeasureQty"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::tradingReferencePrice; }
            static constexpr auto name() noexcept { return "tradingReferencePrice"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::tradingReferenceDate; }
            static constexpr auto name() noexcept { return "tradingReferenceDate"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::highLimitPrice; }
            static constexpr auto name() noexcept { return "highLimitPrice"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::lowLimitPrice; }
            static constexpr auto name() noexcept { return "lowLimitPrice"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::maxPriceVariation; }
            static constexpr auto name() noexcept { return "maxPriceVariation"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::minPriceIncrementAmount; }
            static constexpr auto name() noexcept { return "minPriceIncrementAmount"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::issueDate; }
            static constexpr auto name() noexcept { return "issueDate"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::datedDate; }
            static constexpr auto name() noexcept { return "datedDate"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::maturityDate; }
            static constexpr auto name() noexcept { return "maturityDate"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::couponRate; }
            static constexpr auto name() noexcept { return "couponRate"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::parValue; }
            static constexpr auto name() noexcept { return "parValue"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::couponFrequencyUnit; }
            static constexpr auto name() noexcept { return "couponFrequencyUnit"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::couponFrequencyPeriod; }
            static constexpr auto name() noexcept { return "couponFrequencyPeriod"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::couponDayCount; }
            static constexpr auto name() noexcept { return "couponDayCount"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::countryOfIssue; }
            static constexpr auto name() noexcept { return "countryOfIssue"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::issuer; }
            static constexpr auto name() noexcept { return "issuer"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::financialInstrumentFullName; }
            static constexpr auto name() noexcept { return "financialInstrumentFullName"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::securityAltID; }
            static constexpr auto name() noexcept { return "securityAltID"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::securityAltIDSource; }
            static constexpr auto name() noexcept { return "securityAltIDSource"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::priceQuoteMethod; }
            static constexpr auto name() noexcept { return "priceQuoteMethod"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::partyRoleClearingOrg; }
            static constexpr auto name() noexcept { return "partyRoleClearingOrg"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::userDefinedInstrument; }
            static constexpr auto name() noexcept { return "userDefinedInstrument"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::riskSet; }
            static constexpr auto name() noexcept { return "riskSet"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::marketSet; }
            static constexpr auto name() noexcept { return "marketSet"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::instrumentGUID; }
            static constexpr auto name() noexcept { return "instrumentGUID"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::noEvents; }
            static constexpr auto name() noexcept { return "noEvents"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::noMDFeedTypes; }
            static constexpr auto name() noexcept { return "noMDFeedTypes"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::noInstAttrib; }
            static constexpr auto name() noexcept { return "noInstAttrib"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFixedIncome57::noLotTypeRules; }
            static constexpr auto name() noexcept { return "noLotTypeRules"; }
          };
          return _boost_desc();
        }()
    );
}
//====================================================

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFixedIncome57::NoEvents, (), (
	eventType,
	eventTime,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFixedIncome57::NoMDFeedTypes, (), (
	mDFeedType,
	marketDepth,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFixedIncome57::NoInstAttrib, (), (
	instAttribValue,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFixedIncome57::NoLotTypeRules, (), (
	lotType,
	minLotSize,
))


//================MDInstrumentDefinitionRepo58=========================
__attribute__((unused)) inline auto boost_base_descriptor_fn(MDInstrumentDefinitionRepo58**) {
   return typename boost::describe::detail::bases_descriptor_impl<MDInstrumentDefinitionRepo58, boost::describe::detail::list<>>::type();
}
__attribute__((unused)) inline auto boost_protected_member_descriptor_fn(MDInstrumentDefinitionRepo58**) {
    return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_public>( 0 );
}
__attribute__((unused)) inline auto boost_private_member_descriptor_fn(MDInstrumentDefinitionRepo58**) {
    return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_public>( 0 );
}
__attribute__((unused)) inline auto boost_public_member_descriptor_fn(MDInstrumentDefinitionRepo58**) {
    return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_public>( 0 ,

       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::msg_size; }
            static constexpr auto name() noexcept { return "msg_size"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::message_header; }
            static constexpr auto name() noexcept { return "message_header"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::matchEventIndicator; }
            static constexpr auto name() noexcept { return "matchEventIndicator"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::totNumReports; }
            static constexpr auto name() noexcept { return "totNumReports"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::securityUpdateAction; }
            static constexpr auto name() noexcept { return "securityUpdateAction"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::lastUpdateTime; }
            static constexpr auto name() noexcept { return "lastUpdateTime"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::mDSecurityTradingStatus; }
            static constexpr auto name() noexcept { return "mDSecurityTradingStatus"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::applID; }
            static constexpr auto name() noexcept { return "applID"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::marketSegmentID; }
            static constexpr auto name() noexcept { return "marketSegmentID"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::underlyingProduct; }
            static constexpr auto name() noexcept { return "underlyingProduct"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::securityExchange; }
            static constexpr auto name() noexcept { return "securityExchange"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::securityGroup; }
            static constexpr auto name() noexcept { return "securityGroup"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::asset; }
            static constexpr auto name() noexcept { return "asset"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::symbol; }
            static constexpr auto name() noexcept { return "symbol"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::securityID; }
            static constexpr auto name() noexcept { return "securityID"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::securityType; }
            static constexpr auto name() noexcept { return "securityType"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::cFICode; }
            static constexpr auto name() noexcept { return "cFICode"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::currency; }
            static constexpr auto name() noexcept { return "currency"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::settlCurrency; }
            static constexpr auto name() noexcept { return "settlCurrency"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::matchAlgorithm; }
            static constexpr auto name() noexcept { return "matchAlgorithm"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::minTradeVol; }
            static constexpr auto name() noexcept { return "minTradeVol"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::maxTradeVol; }
            static constexpr auto name() noexcept { return "maxTradeVol"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::minPriceIncrement; }
            static constexpr auto name() noexcept { return "minPriceIncrement"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::displayFactor; }
            static constexpr auto name() noexcept { return "displayFactor"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::unitOfMeasure; }
            static constexpr auto name() noexcept { return "unitOfMeasure"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::unitOfMeasureQty; }
            static constexpr auto name() noexcept { return "unitOfMeasureQty"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::tradingReferencePrice; }
            static constexpr auto name() noexcept { return "tradingReferencePrice"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::tradingReferenceDate; }
            static constexpr auto name() noexcept { return "tradingReferenceDate"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::highLimitPrice; }
            static constexpr auto name() noexcept { return "highLimitPrice"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::lowLimitPrice; }
            static constexpr auto name() noexcept { return "lowLimitPrice"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::maxPriceVariation; }
            static constexpr auto name() noexcept { return "maxPriceVariation"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::financialInstrumentFullName; }
            static constexpr auto name() noexcept { return "financialInstrumentFullName"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::partyRoleClearingOrg; }
            static constexpr auto name() noexcept { return "partyRoleClearingOrg"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::startDate; }
            static constexpr auto name() noexcept { return "startDate"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::endDate; }
            static constexpr auto name() noexcept { return "endDate"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::terminationType; }
            static constexpr auto name() noexcept { return "terminationType"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::securitySubType; }
            static constexpr auto name() noexcept { return "securitySubType"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::moneyOrPar; }
            static constexpr auto name() noexcept { return "moneyOrPar"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::maxNoOfSubstitutions; }
            static constexpr auto name() noexcept { return "maxNoOfSubstitutions"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::priceQuoteMethod; }
            static constexpr auto name() noexcept { return "priceQuoteMethod"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::userDefinedInstrument; }
            static constexpr auto name() noexcept { return "userDefinedInstrument"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::riskSet; }
            static constexpr auto name() noexcept { return "riskSet"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::marketSet; }
            static constexpr auto name() noexcept { return "marketSet"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::instrumentGUID; }
            static constexpr auto name() noexcept { return "instrumentGUID"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::termCode; }
            static constexpr auto name() noexcept { return "termCode"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::brokenDateTermType; }
            static constexpr auto name() noexcept { return "brokenDateTermType"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::noEvents; }
            static constexpr auto name() noexcept { return "noEvents"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::noMDFeedTypes; }
            static constexpr auto name() noexcept { return "noMDFeedTypes"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::noInstAttrib; }
            static constexpr auto name() noexcept { return "noInstAttrib"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::noLotTypeRules; }
            static constexpr auto name() noexcept { return "noLotTypeRules"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::noUnderlyings; }
            static constexpr auto name() noexcept { return "noUnderlyings"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::noRelatedInstruments; }
            static constexpr auto name() noexcept { return "noRelatedInstruments"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionRepo58::noBrokenDates; }
            static constexpr auto name() noexcept { return "noBrokenDates"; }
          };
          return _boost_desc();
        }()
    );
}
//====================================================

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionRepo58::NoEvents, (), (
	eventType,
	eventTime,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionRepo58::NoMDFeedTypes, (), (
	mDFeedType,
	marketDepth,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionRepo58::NoInstAttrib, (), (
	instAttribValue,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionRepo58::NoLotTypeRules, (), (
	lotType,
	minLotSize,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionRepo58::NoUnderlyings, (), (
	underlyingSymbol,
	underlyingSecurityID,
	underlyingSecurityAltID,
	underlyingSecurityAltIDSource,
	underlyingFinancialInstrumentFullName,
	underlyingSecurityType,
	underlyingCountryOfIssue,
	underlyingIssuer,
	underlyingMaxLifeTime,
	underlyingMinDaysToMaturity,
	underlyingInstrumentGUID,
	underlyingMaturityDate,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionRepo58::NoRelatedInstruments, (), (
	relatedSecurityID,
	relatedSymbol,
	relatedInstrumentGUID,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionRepo58::NoBrokenDates, (), (
	brokenDateGUID,
	brokenDateSecurityID,
	brokenDateStart,
	brokenDateEnd,
))

BOOST_DESCRIBE_STRUCT(SnapshotRefreshTopOrders59, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	securityID,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(SnapshotRefreshTopOrders59::NoMDEntries, (), (
	orderID,
	mDOrderPriority,
	mDEntryPx,
	mDDisplayQty,
	mDEntryType,
))

BOOST_DESCRIBE_STRUCT(SecurityStatusWorkup60, (), (
	msg_size,
	message_header,
	transactTime,
	mDEntryPx,
	securityID,
	matchEventIndicator,
	tradeDate,
	tradeLinkID,
	securityTradingStatus,
	haltReason,
	securityTradingEvent,
	noOrderIDEntries,
 ))

BOOST_DESCRIBE_STRUCT(SecurityStatusWorkup60::NoOrderIDEntries, (), (
	orderID,
	side,
	aggressorIndicator,
))

BOOST_DESCRIBE_STRUCT(SnapshotFullRefreshTCP61, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	securityID,
	highLimitPrice,
	lowLimitPrice,
	maxPriceVariation,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(SnapshotFullRefreshTCP61::NoMDEntries, (), (
	mDEntryPx,
	mDEntrySize,
	tradeableSize,
	numberOfOrders,
	mDPriceLevel,
	openCloseSettlFlag,
	mDEntryType,
	tradingReferenceDate,
	settlPriceType,
))

BOOST_DESCRIBE_STRUCT(CollateralMarketValue62, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	block_padding,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(CollateralMarketValue62::NoMDEntries, (), (
	underlyingSecurityAltID,
	underlyingSecurityAltIDSource,
	collateralMarketPrice,
	dirtyPrice,
	underlyingInstrumentGUID,
	mDStreamID,
	padding,
))


//================MDInstrumentDefinitionFX63=========================
__attribute__((unused)) inline auto boost_base_descriptor_fn(MDInstrumentDefinitionFX63**) {
   return typename boost::describe::detail::bases_descriptor_impl<MDInstrumentDefinitionFX63, boost::describe::detail::list<>>::type();
}
__attribute__((unused)) inline auto boost_protected_member_descriptor_fn(MDInstrumentDefinitionFX63**) {
    return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_public>( 0 );
}
__attribute__((unused)) inline auto boost_private_member_descriptor_fn(MDInstrumentDefinitionFX63**) {
    return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_public>( 0 );
}
__attribute__((unused)) inline auto boost_public_member_descriptor_fn(MDInstrumentDefinitionFX63**) {
    return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_public>( 0 ,

       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::msg_size; }
            static constexpr auto name() noexcept { return "msg_size"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::message_header; }
            static constexpr auto name() noexcept { return "message_header"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::matchEventIndicator; }
            static constexpr auto name() noexcept { return "matchEventIndicator"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::totNumReports; }
            static constexpr auto name() noexcept { return "totNumReports"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::securityUpdateAction; }
            static constexpr auto name() noexcept { return "securityUpdateAction"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::lastUpdateTime; }
            static constexpr auto name() noexcept { return "lastUpdateTime"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::mDSecurityTradingStatus; }
            static constexpr auto name() noexcept { return "mDSecurityTradingStatus"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::applID; }
            static constexpr auto name() noexcept { return "applID"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::marketSegmentID; }
            static constexpr auto name() noexcept { return "marketSegmentID"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::underlyingProduct; }
            static constexpr auto name() noexcept { return "underlyingProduct"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::securityExchange; }
            static constexpr auto name() noexcept { return "securityExchange"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::securityGroup; }
            static constexpr auto name() noexcept { return "securityGroup"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::asset; }
            static constexpr auto name() noexcept { return "asset"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::symbol; }
            static constexpr auto name() noexcept { return "symbol"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::securityID; }
            static constexpr auto name() noexcept { return "securityID"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::securityType; }
            static constexpr auto name() noexcept { return "securityType"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::cFICode; }
            static constexpr auto name() noexcept { return "cFICode"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::currency; }
            static constexpr auto name() noexcept { return "currency"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::settlCurrency; }
            static constexpr auto name() noexcept { return "settlCurrency"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::priceQuoteCurrency; }
            static constexpr auto name() noexcept { return "priceQuoteCurrency"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::matchAlgorithm; }
            static constexpr auto name() noexcept { return "matchAlgorithm"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::minTradeVol; }
            static constexpr auto name() noexcept { return "minTradeVol"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::maxTradeVol; }
            static constexpr auto name() noexcept { return "maxTradeVol"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::minPriceIncrement; }
            static constexpr auto name() noexcept { return "minPriceIncrement"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::displayFactor; }
            static constexpr auto name() noexcept { return "displayFactor"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::pricePrecision; }
            static constexpr auto name() noexcept { return "pricePrecision"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::unitOfMeasure; }
            static constexpr auto name() noexcept { return "unitOfMeasure"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::unitOfMeasureQty; }
            static constexpr auto name() noexcept { return "unitOfMeasureQty"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::highLimitPrice; }
            static constexpr auto name() noexcept { return "highLimitPrice"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::lowLimitPrice; }
            static constexpr auto name() noexcept { return "lowLimitPrice"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::maxPriceVariation; }
            static constexpr auto name() noexcept { return "maxPriceVariation"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::userDefinedInstrument; }
            static constexpr auto name() noexcept { return "userDefinedInstrument"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::financialInstrumentFullName; }
            static constexpr auto name() noexcept { return "financialInstrumentFullName"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::fXCurrencySymbol; }
            static constexpr auto name() noexcept { return "fXCurrencySymbol"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::settlType; }
            static constexpr auto name() noexcept { return "settlType"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::interveningDays; }
            static constexpr auto name() noexcept { return "interveningDays"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::fXBenchmarkRateFix; }
            static constexpr auto name() noexcept { return "fXBenchmarkRateFix"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::rateSource; }
            static constexpr auto name() noexcept { return "rateSource"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::fixRateLocalTime; }
            static constexpr auto name() noexcept { return "fixRateLocalTime"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::fixRateLocalTimeZone; }
            static constexpr auto name() noexcept { return "fixRateLocalTimeZone"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::minQuoteLife; }
            static constexpr auto name() noexcept { return "minQuoteLife"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::maxPriceDiscretionOffset; }
            static constexpr auto name() noexcept { return "maxPriceDiscretionOffset"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::instrumentGUID; }
            static constexpr auto name() noexcept { return "instrumentGUID"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::maturityMonthYear; }
            static constexpr auto name() noexcept { return "maturityMonthYear"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::settlementLocale; }
            static constexpr auto name() noexcept { return "settlementLocale"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::altMinPriceIncrement; }
            static constexpr auto name() noexcept { return "altMinPriceIncrement"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::altMinQuoteLife; }
            static constexpr auto name() noexcept { return "altMinQuoteLife"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::altPriceIncrementConstraint; }
            static constexpr auto name() noexcept { return "altPriceIncrementConstraint"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::maxBidAskConstraint; }
            static constexpr auto name() noexcept { return "maxBidAskConstraint"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::noEvents; }
            static constexpr auto name() noexcept { return "noEvents"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::noMDFeedTypes; }
            static constexpr auto name() noexcept { return "noMDFeedTypes"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::noInstAttrib; }
            static constexpr auto name() noexcept { return "noInstAttrib"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::noLotTypeRules; }
            static constexpr auto name() noexcept { return "noLotTypeRules"; }
          };
          return _boost_desc();
        }(),
       []{
          struct _boost_desc {
            static constexpr auto pointer() noexcept { return &MDInstrumentDefinitionFX63::noTradingSessions; }
            static constexpr auto name() noexcept { return "noTradingSessions"; }
          };
          return _boost_desc();
        }()
    );
}
//====================================================

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFX63::NoEvents, (), (
	eventType,
	eventTime,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFX63::NoMDFeedTypes, (), (
	mDFeedType,
	marketDepth,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFX63::NoInstAttrib, (), (
	instAttribValue,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFX63::NoLotTypeRules, (), (
	lotType,
	minLotSize,
))

BOOST_DESCRIBE_STRUCT(MDInstrumentDefinitionFX63::NoTradingSessions, (), (
	tradeDate,
	settlDate,
	maturityDate,
	securityAltID,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshBookLongQty64, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	block_padding,
	noMDEntries,
 	noOrderIDEntries,
 ))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshBookLongQty64::NoMDEntries, (), (
	mDEntryPx,
	mDEntrySize,
	securityID,
	rptSeq,
	numberOfOrders,
	mDPriceLevel,
	mDUpdateAction,
	mDEntryType,
	padding,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshBookLongQty64::NoOrderIDEntries, (), (
	orderID,
	mDOrderPriority,
	mDDisplayQty,
	referenceID,
	orderUpdateAction,
	padding,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshTradeSummaryLongQty65, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	block_padding,
	noMDEntries,
 	noOrderIDEntries,
 ))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshTradeSummaryLongQty65::NoMDEntries, (), (
	mDEntryPx,
	mDEntrySize,
	securityID,
	rptSeq,
	numberOfOrders,
	mDTradeEntryID,
	aggressorSide,
	mDUpdateAction,
	padding,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshTradeSummaryLongQty65::NoOrderIDEntries, (), (
	orderID,
	lastQty,
	padding,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshVolumeLongQty66, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	block_padding,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshVolumeLongQty66::NoMDEntries, (), (
	mDEntrySize,
	securityID,
	rptSeq,
	mDUpdateAction,
	padding,
))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshSessionStatisticsLongQty67, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	block_padding,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(MDIncrementalRefreshSessionStatisticsLongQty67::NoMDEntries, (), (
	mDEntryPx,
	mDEntrySize,
	securityID,
	rptSeq,
	openCloseSettlFlag,
	mDUpdateAction,
	mDEntryType,
	padding,
))

BOOST_DESCRIBE_STRUCT(SnapshotFullRefreshTCPLongQty68, (), (
	msg_size,
	message_header,
	transactTime,
	matchEventIndicator,
	securityID,
	highLimitPrice,
	lowLimitPrice,
	maxPriceVariation,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(SnapshotFullRefreshTCPLongQty68::NoMDEntries, (), (
	mDEntryPx,
	mDEntrySize,
	numberOfOrders,
	mDPriceLevel,
	openCloseSettlFlag,
	mDEntryType,
))

BOOST_DESCRIBE_STRUCT(SnapshotFullRefreshLongQty69, (), (
	msg_size,
	message_header,
	lastMsgSeqNumProcessed,
	totNumReports,
	securityID,
	rptSeq,
	transactTime,
	lastUpdateTime,
	tradeDate,
	mDSecurityTradingStatus,
	highLimitPrice,
	lowLimitPrice,
	maxPriceVariation,
	noMDEntries,
 ))

BOOST_DESCRIBE_STRUCT(SnapshotFullRefreshLongQty69::NoMDEntries, (), (
	mDEntryPx,
	mDEntrySize,
	numberOfOrders,
	mDPriceLevel,
	openCloseSettlFlag,
	mDEntryType,
))

BOOST_DESCRIBE_STRUCT(extended_message_header, (), ( msg_size,
	blockLength,
	templateId,
	// schemaId,
	// version,
))



} // namespace cme::mdp3::v13
