#pragma once
#include "md_prsr/cme/mdp3/sbe/sbe.hpp"
#include "transcoder/byte_order.hpp"
#include "transcoder/options.hpp"
#include "transcoder/basic_types.hpp"
#include <boost/detail/bitmask.hpp>
#include <variant>
#include <array>
#include <cstdint>


// auto generated by cme_gen(WIP) from : https://www.cmegroup.com/ftp/SBEFix/Production/Templates/templates_FixBinary.xml

namespace cme::mdp3::v13 {

using Asset = std::array<char,6>;
using CFICode = std::array<char,6>;
using CHAR = char;
using CountryCode = std::array<char,2>;
using Currency = std::array<char,3>;
using Int16 = std::int16_t;
using Int32 = std::int32_t;
using Int8 = std::int8_t;
using LongName = std::array<char,35>;
using MDFeedType = std::array<char,3>;
using QuoteReqId = std::array<char,23>;
using SecurityExchange = std::array<char,4>;
using SecurityGroup = std::array<char,6>;
using SecuritySubType = std::array<char,5>;
using SecurityType = std::array<char,6>;
using String12 = std::array<char,12>;
using String20 = std::array<char,20>;
using String25 = std::array<char,25>;
using String3 = std::array<char,3>;
using String5 = std::array<char,5>;
using String6 = std::array<char,6>;
using String7 = std::array<char,7>;
using String8 = std::array<char,8>;
using Symbol = std::array<char,20>;
using Text = std::array<char,180>;
using UnderlyingSymbol = std::array<char,20>;
using UnitOfMeasure = std::array<char,30>;
using UserDefinedInstrument = std::array<char,1>;
using uInt16 = std::uint16_t;
using uInt32 = std::uint32_t;
using uInt64 = std::uint64_t;
using uInt8 = std::uint8_t;
struct Decimal9 {
	std::int64_t mantissa;
	static constexpr std::int8_t exponent=-9;
};
struct Decimal9NULL {
	sbe::optional<std::int64_t,9223372036854775807> mantissa;
	static constexpr std::int8_t exponent=-9;
};
struct DecimalQty {
	sbe::optional<std::int32_t,2147483647> mantissa;
	static constexpr std::int8_t exponent=-4;
};
struct MaturityMonthYear {
	sbe::optional<std::uint16_t,65535> year;
	sbe::optional<std::uint8_t,255> month;
	sbe::optional<std::uint8_t,255> day;
	sbe::optional<std::uint8_t,255> week;
};
struct PRICE9 {
	std::int64_t mantissa;
	static constexpr std::int8_t exponent=-9;
};
struct PRICENULL9 {
	sbe::optional<std::int64_t,9223372036854775807> mantissa;
	static constexpr std::int8_t exponent=-9;
};
struct groupSize {
	std::uint16_t blockLength;
	std::uint8_t numInGroup;
};
struct groupSize8Byte {
	std::uint16_t blockLength;
		tc::padding<5> padding_1;
std::uint8_t numInGroup;
};
struct groupSizeEncoding {
	std::uint16_t blockLength;
	std::uint16_t numInGroup;
};
struct messageHeader {
	std::uint16_t blockLength;
	std::uint16_t templateId;
	std::uint16_t schemaId;
	std::uint16_t version;
};
enum class AggressorFlag : std::uint8_t { 
	NotAggressor=0U,
	Aggressor=1U,
	NotPresent=255U
};
enum class AggressorSide : std::uint8_t { 
	NoAggressor=0U,
	Buy=1U,
	Sell=2U,
	NotPresent=255U
};
enum class EventType : uInt8 { 
	Activation=5U,
	LastEligibleTradeDate=7U
};
enum class HaltReason : uInt8 { 
	GroupSchedule=0U,
	SurveillanceIntervention=1U,
	MarketEvent=2U,
	InstrumentActivation=3U,
	InstrumentExpiration=4U,
	Unknown=5U,
	RecoveryInProcess=6U,
	TradeDateRoll=7U
};
enum class LegSide : uInt8 { 
	BuySide=1U,
	SellSide=2U
};
enum class MDEntryType : CHAR { 
	Bid='0',
	Offer='1',
	Trade='2',
	OpenPrice='4',
	SettlementPrice='6',
	TradingSessionHighPrice='7',
	TradingSessionLowPrice='8',
	VWAP='9',
	ClearedVolume='B',
	OpenInterest='C',
	ImpliedBid='E',
	ImpliedOffer='F',
	BookReset='J',
	SessionHighBid='N',
	SessionLowOffer='O',
	FixingPrice='W',
	ElectronicVolume='e',
	ThresholdLimitsandPriceBandVariation='g',
	MarketBestOffer='w',
	MarketBestBid='x'
};
enum class MDEntryTypeBook : CHAR { 
	Bid='0',
	Offer='1',
	ImpliedBid='E',
	ImpliedOffer='F',
	BookReset='J',
	MarketBestOffer='w',
	MarketBestBid='x'
};
enum class MDEntryTypeDailyStatistics : CHAR { 
	SettlementPrice='6',
	ClearedVolume='B',
	OpenInterest='C',
	FixingPrice='W'
};
enum class MDEntryTypeStatistics : CHAR { 
	OpenPrice='4',
	HighTrade='7',
	LowTrade='8',
	VWAP='9',
	HighestBid='N',
	LowestOffer='O'
};
enum class MDUpdateAction : uInt8 { 
	New=0U,
	Change=1U,
	Delete=2U,
	DeleteThru=3U,
	DeleteFrom=4U,
	Overlay=5U
};
enum class MoneyOrPar : std::uint8_t { 
	Money=1U,
	Par=2U,
	NotPresent=255U
};
enum class OpenCloseSettlFlag : std::uint8_t { 
	DailyOpenPrice=0U,
	IndicativeOpeningPrice=5U,
	IntradayVWAP=100U,
	RepoAverage8_30AM=101U,
	RepoAverage10AM=102U,
	PrevSessionRepoAverage10AM=103U,
	NotPresent=255U
};
enum class OrderUpdateAction : uInt8 { 
	New=0U,
	Update=1U,
	Delete=2U
};
enum class PriceSource : std::uint8_t { 
	MarketPlaceAssistant=0U,
	Globex=1U,
	Refinitiv=2U,
	ICAP=3U,
	NotPresent=255U
};
enum class PutOrCall : uInt8 { 
	Put=0U,
	Call=1U
};
enum class RepoSubType : uInt8 { 
	Special=0U,
	GC=1U,
	GCForDBV=2U
};
enum class SecurityAltIDSource : std::uint8_t { 
	CUSIP=1U,
	ISIN=4U,
	NotPresent=255U
};
enum class SecurityTradingEvent : uInt8 { 
	NoEvent=0U,
	NoCancel=1U,
	ResetStatistics=4U,
	ImpliedMatchingON=5U,
	ImpliedMatchingOFF=6U,
	EndOfWorkup=7U
};
enum class SecurityTradingStatus : std::uint8_t { 
	TradingHalt=2U,
	Close=4U,
	NewPriceIndication=15U,
	ReadyToTrade=17U,
	NotAvailableForTrading=18U,
	UnknownorInvalid=20U,
	PreOpen=21U,
	PreCross=24U,
	Cross=25U,
	PostClose=26U,
	NoChange=103U,
	PrivateWorkup=201U,
	PublicWorkup=202U,
	NotPresent=255U
};
enum class SecurityUpdateAction : CHAR { 
	Add='A',
	Delete='D',
	Modify='M'
};
enum class Side : uInt8 { 
	Buy=1U,
	Sell=2U
};
enum class WorkupTradingStatus : uInt8 { 
	ReadyToTrade=17U,
	NotAvailableForTrading=18U,
	PrivateWorkup=201U,
	PublicWorkup=202U
};
enum class InstAttribValue : uInt32 { 
	ElectronicMatchEligible=1 << 0U,
	OrderCrossEligible=1 << 1U,
	BlockTradeEligible=1 << 2U,
	EFPEligible=1 << 3U,
	EBFEligible=1 << 4U,
	EFSEligible=1 << 5U,
	EFREligible=1 << 6U,
	OTCEligible=1 << 7U,
	iLinkIndicativeMassQuotingEligible=1 << 8U,
	NegativeStrikeEligible=1 << 9U,
	NegativePriceOutrightEligible=1 << 10U,
	IsFractional=1 << 11U,
	VolatilityQuotedOption=1 << 12U,
	RFQCrossEligible=1 << 13U,
	ZeroPriceOutrightEligible=1 << 14U,
	DecayingProductEligibility=1 << 15U,
	VariableProductEligibility=1 << 16U,
	DailyProductEligibility=1 << 17U,
	GTOrdersEligibility=1 << 18U,
	ImpliedMatchingEligibility=1 << 19U,
	TriangulationEligible=1 << 20U,
	VariableCabEligible=1 << 21U,
	InvertedBook=1 << 22U,
	IsAoNInstrument=1 << 23U,
	SEFRegulated=1 << 24U,
	MTFRegulated=1 << 25U,
	eFIXInstrument=1 << 26U,
	HedgeInstrument=1 << 27U
};
BOOST_BITMASK(InstAttribValue)

enum class MatchEventIndicator : uInt8 { 
	LastTradeMsg=1 << 0U,
	LastVolumeMsg=1 << 1U,
	LastQuoteMsg=1 << 2U,
	LastStatsMsg=1 << 3U,
	LastImpliedMsg=1 << 4U,
	RecoveryMsg=1 << 5U,
	Reserved=1 << 6U,
	EndOfEvent=1 << 7U
};
BOOST_BITMASK(MatchEventIndicator)

enum class SettlPriceType : uInt8 { 
	FinalDaily=1 << 0U,
	Actual=1 << 1U,
	Rounded=1 << 2U,
	Intraday=1 << 3U,
	ReservedBits=1 << 4U,
	NullValue=1 << 7U
};
BOOST_BITMASK(SettlPriceType)

struct ChannelReset4 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	// Number of entries in Market Data message
	struct NoMDEntries {
		static constexpr std::int8_t mDUpdateAction=0;	// Market Data update action
		static constexpr char mDEntryType='J';	// Market Data entry type  
		Int16 applID;	// Indicates the channel ID as defined in the XML configuration file
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct AdminHeartbeat12 {
	std::uint16_t msg_size;
	messageHeader message_header;
};

struct AdminLogin15 {
	std::uint16_t msg_size;
	messageHeader message_header;
	Int8 heartBtInt;	// Heartbeat interval (seconds)
};

struct AdminLogout16 {
	std::uint16_t msg_size;
	messageHeader message_header;
	Text text;	// Free format text string. May include logout confirmation or reason for logout
};

struct SecurityStatus30 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch.
	SecurityGroup securityGroup;	// Security Group
	Asset asset;	// Product Code within Security Group specified
	sbe::optional<std::int32_t,2147483647> securityID;	// If this tag is present, 35=f message is sent for the instrument
	sbe::optional<std::uint16_t,65535U> tradeDate;	// Trade Session Date
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> securityTradingStatus;	// Identifies the trading status applicable to the instrument or Security Group
	HaltReason haltReason;	// Identifies the reason for the status change
	SecurityTradingEvent securityTradingEvent;	// Identifies an additional event or a rule related to the status
};

struct MDIncrementalRefreshVolume37 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		Int32 mDEntrySize;	// Cumulative traded volume
		Int32 securityID;	// Security ID
		uInt32 rptSeq;	// Market Data entry sequence number per instrument update
		MDUpdateAction mDUpdateAction;	// Market Data update action
		static constexpr char mDEntryType='e';	// Electronic Volume entry provides cumulative session trade volume updated with the event
		tc::padding<3> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct QuoteRequest39 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	QuoteReqId quoteReqID;	// Quote Request ID defined by the exchange
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<3> block_padding;
	// Indicates the number of repeating symbols specified
	struct NoRelatedSym {
		Symbol symbol;	// Instrument Name or Symbol
		Int32 securityID;	// Security ID
		sbe::optional<std::int32_t,2147483647> orderQty;	// Quantity requested
		Int8 quoteType;	// Type of quote requested
		sbe::optional<std::int8_t,127> side;	// Side requested
		tc::padding<2> padding;
	};
	sbe::group<NoRelatedSym,groupSize> noRelatedSym;
};

struct MDIncrementalRefreshBook46 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL9 mDEntryPx;	// Market Data entry price
		sbe::optional<std::int32_t,2147483647> mDEntrySize;	// Market Data entry size
		Int32 securityID;	// Security ID
		uInt32 rptSeq;	// Market Data entry sequence number per instrument update
		sbe::optional<std::int32_t,2147483647> numberOfOrders;	// In Book entry - aggregate number of orders at given price level
		uInt8 mDPriceLevel;	// Aggregate book level
		MDUpdateAction mDUpdateAction;	//  Market Data update action
		MDEntryTypeBook mDEntryType;	// Market Data entry type
		sbe::optional<std::int32_t,2147483647> tradeableSize;	// Tradeable qty
		tc::padding<1> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
	// Number of OrderID entries
	struct NoOrderIDEntries {
		uInt64 orderID;	// Unique Order ID
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDOrderPriority;	// Order priority for execution on the order book
		sbe::optional<std::int32_t,2147483647> mDDisplayQty;	// Visible qty of order
		sbe::optional<std::uint8_t,255U> referenceID;	// Reference to corresponding Price and Security ID, sequence of MD entry in the message
		OrderUpdateAction orderUpdateAction;	// Order book update action to be applied to the order referenced by OrderID
		tc::padding<2> padding;
	};
	sbe::group<NoOrderIDEntries,groupSize8Byte> noOrderIDEntries;
};

struct MDIncrementalRefreshOrderBook47 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		sbe::optional<std::uint64_t,18446744073709551615ULL> orderID;	// Order ID
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDOrderPriority;	// Order priority for execution on the order book
		PRICENULL9 mDEntryPx;	// Order price
		sbe::optional<std::int32_t,2147483647> mDDisplayQty;	// Visible order qty
		Int32 securityID;	// Security ID 
		MDUpdateAction mDUpdateAction;	// Order book update action to be applied to the order referenced by OrderID
		MDEntryTypeBook mDEntryType;	// Market Data entry type 
		tc::padding<6> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDIncrementalRefreshTradeSummary48 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of Trade Summary entries
	struct NoMDEntries {
		PRICE9 mDEntryPx;	// Trade price
		Int32 mDEntrySize;	// Consolidated trade quantity
		Int32 securityID;	// Security ID as defined by CME
		uInt32 rptSeq;	// Sequence number per instrument update
		Int32 numberOfOrders;	// The total number of real orders per instrument that participated in a match step within a match event
		sbe::optional<AggressorSide,AggressorSide::NotPresent> aggressorSide;	// Indicates which side is the aggressor or if there is no aggressor
		MDUpdateAction mDUpdateAction;	// Market Data update action
		static constexpr char mDEntryType='2';	// Market Data entry type
		sbe::optional<std::uint32_t,4294967295U> mDTradeEntryID;	// Market Data Trade entry ID
		tc::padding<2> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
	// Number of OrderID entries
	struct NoOrderIDEntries {
		uInt64 orderID;	// Unique order identifier as assigned by the exchange
		Int32 lastQty;	// Quantity bought or sold on this last fill
		tc::padding<4> padding;
	};
	sbe::group<NoOrderIDEntries,groupSize8Byte> noOrderIDEntries;
};

struct MDIncrementalRefreshDailyStatistics49 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL9 mDEntryPx;	// Market Data entry price
		sbe::optional<std::int32_t,2147483647> mDEntrySize;	// Market Data entry size
		Int32 securityID;	// Security ID 
		uInt32 rptSeq;	// Market Data entry sequence number per instrument update
		sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates trade session date corresponding to a statistic entry
		SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
		MDUpdateAction mDUpdateAction;	// Market Data update action
		MDEntryTypeDailyStatistics mDEntryType;	// Market Data entry type
		tc::padding<7> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDIncrementalRefreshLimitsBanding50 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL9 highLimitPrice;	// Upper price threshold for the instrument
		PRICENULL9 lowLimitPrice;	// Lower price threshold for the instrument
		PRICENULL9 maxPriceVariation;	// Differential static value for price banding
		Int32 securityID;	// Security ID 
		uInt32 rptSeq;	// MD Entry sequence number per instrument update
		static constexpr std::int8_t mDUpdateAction=0;	// Market Data entry update action. In order to delete banding value, high or low limit, the deleted price field is populated with a NULL 
		static constexpr char mDEntryType='g';	// Market Data entry type   
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDIncrementalRefreshSessionStatistics51 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICE9 mDEntryPx;	// Market Data entry price
		Int32 securityID;	// Security ID 
		uInt32 rptSeq;	// MD Entry sequence number per instrument update
		sbe::optional<OpenCloseSettlFlag,OpenCloseSettlFlag::NotPresent> openCloseSettlFlag;	// Flag describing IOP and Open Price entries
		MDUpdateAction mDUpdateAction;	// Market Data update action 
		MDEntryTypeStatistics mDEntryType;	// Market Data entry type   
		sbe::optional<std::int32_t,2147483647> mDEntrySize;	// Indicative Opening Quantity 
		tc::padding<1> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct SnapshotFullRefresh52 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt32 lastMsgSeqNumProcessed;	// Sequence number of the last Incremental feed packet processed. This value is used to synchronize the snapshot loop with the real-time feed
	uInt32 totNumReports;	// Total number of messages replayed in the loop
	Int32 securityID;	// Security ID
	uInt32 rptSeq;	// Sequence number of the last Market Data entry processed for the instrument
	uInt64 transactTime;	// Timestamp of the last event security participated in, sent as number of nanoseconds since Unix epoch
	uInt64 lastUpdateTime;	// UTC Date and time of last Security Definition add, update or delete on a given Market Data channel
	sbe::optional<std::uint16_t,65535U> tradeDate;	// Trade session date sent as number of days since Unix epoch
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current trading state of the instrument
	PRICENULL9 highLimitPrice;	// Upper price threshold for the instrument
	PRICENULL9 lowLimitPrice;	// Lower price threshold for the instrument
	PRICENULL9 maxPriceVariation;	// Differential value for price banding
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL9 mDEntryPx;	// Market Data entry price
		sbe::optional<std::int32_t,2147483647> mDEntrySize;	// Market Data entry quantity
		sbe::optional<std::int32_t,2147483647> numberOfOrders;	// Aggregate number of orders at the given price level
		sbe::optional<std::int8_t,127> mDPriceLevel;	// Aggregate book position
		sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates the date of trade session corresponding to a statistic entry
		sbe::optional<OpenCloseSettlFlag,OpenCloseSettlFlag::NotPresent> openCloseSettlFlag;	// Flag describing  Open Price entry
		SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
		MDEntryType mDEntryType;	// Market Data entry type
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct SnapshotFullRefreshOrderBook53 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt32 lastMsgSeqNumProcessed;	// Sequence number of the last Incremental feed packet processed. This value is used to synchronize the snapshot loop with the real-time feed
	uInt32 totNumReports;	// Total number of instruments in the replayed loop
	Int32 securityID;	// Security ID
	uInt32 noChunks;	// Total number of packets that constitutes a single instrument order book
	uInt32 currentChunk;	// Chunk sequence
	uInt64 transactTime;	// Timestamp of the last event security participated in, sent as number of nanoseconds since Unix epoch
	// Number of entries in Market Data message
	struct NoMDEntries {
		uInt64 orderID;	// Unique Order ID
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDOrderPriority;	// Order priority for execution on the order book
		PRICE9 mDEntryPx;	// Order Price
		Int32 mDDisplayQty;	// Visible order qty
		MDEntryTypeBook mDEntryType;	// Market Data entry type
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDInstrumentDefinitionFuture54 {
	std::uint16_t msg_size;
	messageHeader message_header;
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<std::uint32_t,4294967295U> totNumReports;	// Total number of instruments in the Replay loop. Used on Replay Feed only 
	SecurityUpdateAction securityUpdateAction;	// Last Security update action on Incremental feed, 'D' or 'M' is used when a mid-week deletion or modification (i.e. extension) occurs
	uInt64 lastUpdateTime;	// Timestamp of when the instrument was last added, modified or deleted
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current state of the instrument. In Security Definition message this tag is available in the Instrument Replay feed only 
	Int16 applID;	// The channel ID as defined in the XML Configuration file
	uInt8 marketSegmentID;	// Identifies the market segment, populated for all CME Globex instruments
	uInt8 underlyingProduct;	// Product complex
	SecurityExchange securityExchange;	// Exchange used to identify a security
	SecurityGroup securityGroup;	// Security Group Code.
	Asset asset;	// The underlying asset code also known as Product Code
	Symbol symbol;	// Instrument Name or Symbol 
	Int32 securityID;	// Unique instrument ID
	static constexpr char securityIDSource='8';	// Identifies class or source of tag 48-SecurityID value
	SecurityType securityType;	// Security Type
	CFICode cFICode;	// ISO standard instrument categorization code
	MaturityMonthYear maturityMonthYear;	// This field provides the actual calendar date for contract maturity
	Currency currency;	// Identifies currency used for price
	Currency settlCurrency;	// Identifies currency used for settlement, if different from trading currency
	CHAR matchAlgorithm;	// Matching algorithm 
	uInt32 minTradeVol;	// The minimum trading volume for a security
	uInt32 maxTradeVol;	// The maximum trading volume for a security
	PRICE9 minPriceIncrement;	// Minimum constant tick for the instrument, sent only if instrument is non-VTT (Variable Tick table) eligible
	Decimal9 displayFactor;	// Contains the multiplier to convert the CME Globex display price to the conventional price
	sbe::optional<std::uint8_t,255U> mainFraction;	// Price Denominator of Main Fraction
	sbe::optional<std::uint8_t,255U> subFraction;	// Price Denominator of Sub Fraction
	sbe::optional<std::uint8_t,255U> priceDisplayFormat;	// Number of decimals in fractional display price
	UnitOfMeasure unitOfMeasure;	// Unit of measure for the products' original contract size. This will be populated for all products listed on CME Globex
	Decimal9NULL unitOfMeasureQty;	// This field contains the contract size for each instrument. Used in combination with tag 996-UnitofMeasure
	PRICENULL9 tradingReferencePrice;	// Reference price for prelisted instruments or the last calculated Settlement whether it be Theoretical, Preliminary or a Final Settle of the session.
	SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
	sbe::optional<std::int32_t,2147483647> openInterestQty;	// The total open interest for the market at the close of the prior trading session.
	sbe::optional<std::int32_t,2147483647> clearedVolume;	// The total cleared volume of instrument traded during the prior trading session.
	PRICENULL9 highLimitPrice;	// Allowable high limit price for the trading day
	PRICENULL9 lowLimitPrice;	// Allowable low limit price for the trading day
	PRICENULL9 maxPriceVariation;	// Differential value for price banding.
	sbe::optional<std::int32_t,2147483647> decayQuantity;	// Indicates the quantity that a contract will decay daily by once the decay start date is reached
	sbe::optional<std::uint16_t,65535U> decayStartDate;	// Indicates the date at which a decaying contract will begin to decay
	sbe::optional<std::int32_t,2147483647> originalContractSize;	// Fixed contract value assigned to each product
	sbe::optional<std::int32_t,2147483647> contractMultiplier;	// Number of deliverable units per instrument, e.g., peak days in maturity month or number of calendar days in maturity month
	sbe::optional<std::int8_t,127> contractMultiplierUnit;	// Indicates the type of multiplier being applied to the product. Optionally used in combination with tag 231-ContractMultiplier
	sbe::optional<std::int8_t,127> flowScheduleType;	// The schedule according to which the electricity is delivered in a physical contract, or priced in a financial contract. Specifies whether the contract is defined according to the Easter Peak, Eastern Off-Peak, Western Peak or Western Off-Peak.
	PRICENULL9 minPriceIncrementAmount;	// Monetary value equivalent to the minimum price fluctuation
	UserDefinedInstrument userDefinedInstrument;	// User-defined instruments flag
	sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates session date corresponding to the settlement price in tag 1150-TradingReferencePrice
	sbe::optional<std::uint64_t,18446744073709551615ULL> instrumentGUID;	// External unique instrument ID
	// Number of repeating EventType entries
	struct NoEvents {
		EventType eventType;	// Code to represent the type of event
		uInt64 eventTime;	// Date and Time of instument Activation or Expiration event sent as number of nanoseconds since Unix epoch
	};
	sbe::group<NoEvents,groupSize> noEvents;
	// Number of repeating FeedType entries
	struct NoMDFeedTypes {
		MDFeedType mDFeedType;	// Describes a class of service for a given data feed. GBX- Real Book, GBI-Implied Book
		Int8 marketDepth;	// Book depth
	};
	sbe::group<NoMDFeedTypes,groupSize> noMDFeedTypes;
	// Number of repeating InstrAttribType entries
	struct NoInstAttrib {
		static constexpr std::int8_t instAttribType=24;	// Instrument eligibility attributes
		InstAttribValue instAttribValue;	// Bitmap field of 32 Boolean type instrument eligibility flags
	};
	sbe::group<NoInstAttrib,groupSize> noInstAttrib;
	// Number of entries
	struct NoLotTypeRules {
		Int8 lotType;	// This tag is required to interpret the value in tag 1231-MinLotSize
		DecimalQty minLotSize;	// Minimum quantity accepted for order entry. If tag 1093-LotType=4, this value is the minimum quantity for order entry expressed in the applicable units, specified in tag 996-UnitOfMeasure, e.g. megawatts
	};
	sbe::group<NoLotTypeRules,groupSize> noLotTypeRules;
};

struct MDInstrumentDefinitionOption55 {
	std::uint16_t msg_size;
	messageHeader message_header;
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<std::uint32_t,4294967295U> totNumReports;	// Total number of instruments in the Replay loop. Used on Replay Feed only 
	SecurityUpdateAction securityUpdateAction;	// Last Security update action on Incremental feed, 'D' or 'M' is used when a mid-week deletion or modification (i.e. extension) occurs
	uInt64 lastUpdateTime;	// Timestamp of when the instrument was last added, modified or deleted
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current state of the instrument. The data is available in the Instrument Replay feed only 
	Int16 applID;	// The channel ID as defined in the XML Configuration file
	uInt8 marketSegmentID;	// Identifies the market segment, populated for all CME Globex instruments
	uInt8 underlyingProduct;	// Indicates the product complex
	SecurityExchange securityExchange;	// Exchange used to identify a security
	SecurityGroup securityGroup;	// Security Group Code 
	Asset asset;	// The underlying asset code also known as Product Code
	Symbol symbol;	// Instrument Name or Symbol. Previously used as Instrument Group Code 
	Int32 securityID;	// Unique Instrument ID
	static constexpr char securityIDSource='8';	// Identifies class or source of tag 48-SecurityID value
	SecurityType securityType;	// Security Type
	CFICode cFICode;	// ISO standard instrument categorization code
	PutOrCall putOrCall;	// Indicates whether an option instrument is a put or call
	MaturityMonthYear maturityMonthYear;	// This field provides the actual calendar date for contract maturity
	Currency currency;	// Identifies currency used for price
	PRICENULL9 strikePrice;	// Strike Price for an option instrument
	Currency strikeCurrency;	// Currency in which the StrikePrice is denominated
	Currency settlCurrency;	// Identifies currency used for settlement, if different from trade price currency
	PRICENULL9 minCabPrice;	// Defines cabinet price for outright options products
	CHAR matchAlgorithm;	// Matching algorithm
	uInt32 minTradeVol;	// The minimum trading volume for a security.
	uInt32 maxTradeVol;	// The maximum trading volume for a security.
	PRICENULL9 minPriceIncrement;	// Minimum constant tick for the instrument
	PRICENULL9 minPriceIncrementAmount;	// Monetary value equivalent to the minimum price fluctuation
	Decimal9 displayFactor;	// Contains the multiplier to convert the CME Globex display price to the conventional price
	sbe::optional<std::int8_t,127> tickRule;	// VTT code referencing variable tick table 
	sbe::optional<std::uint8_t,255U> mainFraction;	// Price Denominator of Main Fraction
	sbe::optional<std::uint8_t,255U> subFraction;	// Price Denominator of Sub Fraction
	sbe::optional<std::uint8_t,255U> priceDisplayFormat;	// Number of decimals in fractional display price
	UnitOfMeasure unitOfMeasure;	// Unit of measure for the products' original contract size. This will be populated for all products listed on CME Globex
	Decimal9NULL unitOfMeasureQty;	// This field contains the contract size for each instrument. Used in combination with tag 996-UnitofMeasure
	PRICENULL9 tradingReferencePrice;	// Reference price - the most recently available Settlement whether it be Theoretical, Preliminary or a Final Settle of the session
	SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
	sbe::optional<std::int32_t,2147483647> clearedVolume;	// The total cleared volume of instrument traded during the prior trading session
	sbe::optional<std::int32_t,2147483647> openInterestQty;	// The total open interest for the market at the close of the prior trading session.
	PRICENULL9 lowLimitPrice;	// Allowable low limit price for the trading day 
	PRICENULL9 highLimitPrice;	// Allowable high limit price for the trading day
	UserDefinedInstrument userDefinedInstrument;	// User-defined instruments flag
	sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates session date corresponding to the settlement price in tag 1150-TradingReferencePrice
	sbe::optional<std::uint64_t,18446744073709551615ULL> instrumentGUID;	// External unique instrument ID
	// Number of EventType entries
	struct NoEvents {
		EventType eventType;	// Code to represent the type of event
		uInt64 eventTime;	// Date and Time of instument Activation or Expiration event sent as number of nanoseconds since Unix epoch
	};
	sbe::group<NoEvents,groupSize> noEvents;
	// Number of FeedType entries
	struct NoMDFeedTypes {
		MDFeedType mDFeedType;	// Describes a class of service for a given data feed. GBX- Real Book, GBI-Implied Book
		Int8 marketDepth;	// Book depth
	};
	sbe::group<NoMDFeedTypes,groupSize> noMDFeedTypes;
	// Number of InstrAttribType entries
	struct NoInstAttrib {
		static constexpr std::int8_t instAttribType=24;	// Instrument Eligibility Attributes
		InstAttribValue instAttribValue;	// Bitmap field of 32 Boolean type Instrument eligibility flags
	};
	sbe::group<NoInstAttrib,groupSize> noInstAttrib;
	// Number of entries
	struct NoLotTypeRules {
		Int8 lotType;	// This tag is required to interpret the value in tag 1231-MinLotSize
		DecimalQty minLotSize;	// Minimum quantity accepted for order entry. If tag 1093-LotType=4, this value is the minimum quantity for order entry expressed in the applicable units, specified in tag 996-UnitOfMeasure, e.g. megawatts
	};
	sbe::group<NoLotTypeRules,groupSize> noLotTypeRules;
	// Number of underlying instruments
	struct NoUnderlyings {
		Int32 underlyingSecurityID;	// Unique Instrument ID as qualified by the exchange per tag 305-UnderlyingSecurityIDSource
		static constexpr char underlyingSecurityIDSource='8';	// This value is always '8' for CME
		UnderlyingSymbol underlyingSymbol;	// Underlying Instrument Symbol (Contract Name)
	};
	sbe::group<NoUnderlyings,groupSize> noUnderlyings;
	// Number of related instruments group
	struct NoRelatedInstruments {
		Int32 relatedSecurityID;	// Related Security ID
		static constexpr char relatedSecurityIDSource='8';	// Related Security ID source
		Symbol relatedSymbol;	// Related instrument Symbol
	};
	sbe::group<NoRelatedInstruments,groupSize> noRelatedInstruments;
};

struct MDInstrumentDefinitionSpread56 {
	std::uint16_t msg_size;
	messageHeader message_header;
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<std::uint32_t,4294967295U> totNumReports;	// Total number of instruments in the Replay loop. Used on Replay Feed only
	SecurityUpdateAction securityUpdateAction;	// Last Security update action on Incremental feed, 'D' or 'M' is used when a mid-week deletion or modification (i.e. extension) occurs
	uInt64 lastUpdateTime;	// Timestamp of when the instrument was last added, modified or deleted
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current state of the instrument. The data is available in the Instrument Replay feed only
	Int16 applID;	// The channel ID as defined in the XML Configuration file
	uInt8 marketSegmentID;	// Identifies the market segment, populated for all CME Globex instruments
	sbe::optional<std::uint8_t,255U> underlyingProduct;	// Product complex
	SecurityExchange securityExchange;	// Exchange used to identify a security
	SecurityGroup securityGroup;	// Security Group Code
	Asset asset;	// The underlying asset code also known as Product Code
	Symbol symbol;	// Instrument Name or Symbol. Previously used as  Group Code 
	Int32 securityID;	// Unique instrument ID
	static constexpr char securityIDSource='8';	// Identifies class or source of the security ID (Tag 48) value
	SecurityType securityType;	// Security Type
	CFICode cFICode;	// ISO standard instrument categorization code
	MaturityMonthYear maturityMonthYear;	// This field provides the actual calendar date for contract maturity
	Currency currency;	// Identifies currency used for price
	SecuritySubType securitySubType;	// Strategy type
	UserDefinedInstrument userDefinedInstrument;	// User-defined instruments flag
	CHAR matchAlgorithm;	// Matching algorithm
	uInt32 minTradeVol;	// The minimum trading volume for a security
	uInt32 maxTradeVol;	// The maximum trading volume for a security
	PRICENULL9 minPriceIncrement;	// Minimum constant tick for the instrument, sent only if instrument is non-VTT (Variable Tick table) eligible
	Decimal9 displayFactor;	// Contains the multiplier to convert the CME Globex display price to the conventional price
	sbe::optional<std::uint8_t,255U> priceDisplayFormat;	// Number of decimals in fractional display price
	PRICENULL9 priceRatio;	// Used for price calculation in spread and leg pricing
	sbe::optional<std::int8_t,127> tickRule;	// Tick Rule 
	UnitOfMeasure unitOfMeasure;	// Unit of measure for the products' original contract size
	PRICENULL9 tradingReferencePrice;	// Reference price - the most recently available Settlement whether it be Theoretical, Preliminary or a Final Settle of the session
	SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
	sbe::optional<std::int32_t,2147483647> openInterestQty;	// The total open interest for the market at the close of the prior trading session
	sbe::optional<std::int32_t,2147483647> clearedVolume;	// The total cleared volume of instrument traded during the prior trading session
	PRICENULL9 highLimitPrice;	// Allowable high limit price for the trading day
	PRICENULL9 lowLimitPrice;	// Allowable low limit price for the trading day
	PRICENULL9 maxPriceVariation;	// Differential value for price banding
	sbe::optional<std::uint8_t,255U> mainFraction;	// Price Denominator of Main Fraction
	sbe::optional<std::uint8_t,255U> subFraction;	// Price Denominator of Sub Fraction
	sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates session date corresponding to the settlement price in tag 1150-TradingReferencePrice
	String5 priceQuoteMethod;	// Price quotation method
	String6 riskSet;	// Risk Set identifies the list of instruments sharing credit limits set up
	String6 marketSet;	// Market Set defines the bilateral relationship and Self Match Prevention configuration for eligible markets
	sbe::optional<std::uint64_t,18446744073709551615ULL> instrumentGUID;	// External unique instrument ID
	LongName financialInstrumentFullName;	// Long name of the instrument
	// Number of repeating EventType entries
	struct NoEvents {
		EventType eventType;	// Code to represent the type of event
		uInt64 eventTime;	// Date and time of instument Activation or Expiration event sent as number of nanoseconds since Unix epoch
	};
	sbe::group<NoEvents,groupSize> noEvents;
	// Number of FeedType entries
	struct NoMDFeedTypes {
		MDFeedType mDFeedType;	// Describes a class of service for a given data feed. GBX- Real Book, GBI-Implied Book
		Int8 marketDepth;	// Identifies the depth of book
	};
	sbe::group<NoMDFeedTypes,groupSize> noMDFeedTypes;
	// Number of InstrAttribType entries
	struct NoInstAttrib {
		static constexpr std::int8_t instAttribType=24;	// Instrument Eligibility Attributes
		InstAttribValue instAttribValue;	// Bitmap field of 32 Boolean type Instrument eligibility flags
	};
	sbe::group<NoInstAttrib,groupSize> noInstAttrib;
	// Number of entries
	struct NoLotTypeRules {
		Int8 lotType;	// This tag is required to interpret the value in tag 1231-MinLotSize
		DecimalQty minLotSize;	// Minimum quantity accepted for order entry. If tag 1093-LotType=4, this value is the minimum quantity for order entry expressed in the applicable units, specified in tag 996-UnitOfMeasure, e.g. megawatts
	};
	sbe::group<NoLotTypeRules,groupSize> noLotTypeRules;
	// Number of Leg entries
	struct NoLegs {
		Int32 legSecurityID;	// Leg Security ID
		static constexpr char legSecurityIDSource='8';	// Identifies source of tag 602-LegSecurityID value
		LegSide legSide;	// Leg side
		Int8 legRatioQty;	// Leg ratio of quantity for this individual leg relative to the entire multi-leg instrument
		PRICENULL9 legPrice;	// Price for the future leg of a UDS Covered instrument 
		DecimalQty legOptionDelta;	// Delta used to calculate the quantity of futures used to cover the option or option strategy
	};
	sbe::group<NoLegs,groupSize> noLegs;
};

struct MDInstrumentDefinitionFixedIncome57 {
	std::uint16_t msg_size;
	messageHeader message_header;
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<std::uint32_t,4294967295U> totNumReports;	// Total number of instruments in the Replay loop. Used on Replay Feed only
	SecurityUpdateAction securityUpdateAction;	// Last Security update action on Incremental feed, 'D' or 'M' is used when a mid-week deletion or modification (i.e. extension) occurs.
	uInt64 lastUpdateTime;	// Timestamp of when the instrument was last added, modified or deleted
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current market state of the instrument
	Int16 applID;	// MD channel ID as defined in the XML Configuration file
	uInt8 marketSegmentID;	// Identifies the market segment for all CME Globex instruments
	uInt8 underlyingProduct;	// Indicates the product complex
	SecurityExchange securityExchange;	// Exchange used to identify a security
	SecurityGroup securityGroup;	// Security Group Code
	Asset asset;	// The underlying asset code also known as Product Code
	Symbol symbol;	// Instrument Name or Symbol
	Int32 securityID;	// Unique instrument ID
	static constexpr char securityIDSource='8';	// Identifies class or source of Tag 48-SecurityID value
	SecurityType securityType;	// Security Type
	CFICode cFICode;	// ISO standard instrument categorization code
	Currency currency;	// Identifies the currency used for price
	Currency settlCurrency;	// Identifies currency used for settlement, if different from trade price currency
	CHAR matchAlgorithm;	// Matching Algorithm  
	uInt32 minTradeVol;	// The minimum trading volume for a security
	uInt32 maxTradeVol;	// The maximum trading volume for a security
	PRICENULL9 minPriceIncrement;	// Minimum constant tick for the instrument, sent only if instrument is non-VTT (Variable Tick table) eligible
	Decimal9 displayFactor;	// Contains the multiplier to convert the CME Globex display price to the conventional price
	sbe::optional<std::uint8_t,255U> mainFraction;	// Price Denominator of Main Fraction
	sbe::optional<std::uint8_t,255U> subFraction;	// Price Denominator of Sub Fraction
	sbe::optional<std::uint8_t,255U> priceDisplayFormat;	// Number of Decimals in Displayed Price
	UnitOfMeasure unitOfMeasure;	// Unit of measure for the products' original contract size. This will be populated for all products listed on CME Globex.
	Decimal9NULL unitOfMeasureQty;	// This field contains the contract size for each instrument. Use in combination with tag 996-UnitofMeasure 
	PRICENULL9 tradingReferencePrice;	// Trading Reference Price
	sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates session date corresponding to the reference price in tag 1150-TradingReferencePrice
	PRICENULL9 highLimitPrice;	// Allowable high limit price for the trading day
	PRICENULL9 lowLimitPrice;	// Allowable low limit price for the trading day
	PRICENULL9 maxPriceVariation;	// Differential value for price banding
	PRICENULL9 minPriceIncrementAmount;	// Monetary value equivalent to the minimum price fluctuation.
	sbe::optional<std::uint16_t,65535U> issueDate;	// Issue Date
	sbe::optional<std::uint16_t,65535U> datedDate;	// Dated Date
	sbe::optional<std::uint16_t,65535U> maturityDate;	// Maturity Date
	Decimal9NULL couponRate;	// The rate of interest that, when multiplied by the principal, par value, or face value of a bond, provides the currency amount of the periodic interest payment
	PRICENULL9 parValue;	// Par value
	String3 couponFrequencyUnit;	// Time unit associated with the frequency of the bond's coupon payment
	sbe::optional<std::uint16_t,65535U> couponFrequencyPeriod;	// Time unit multiplier for the frequency of the bond's coupon payment
	String20 couponDayCount;	// The day count convention used in interest calculations for a bond or an interest bearing security
	CountryCode countryOfIssue;	// Country of Origin, ISO alpha-2 country code
	String25 issuer;	// Name of security issuer or the Legal Entity Identifier (LEI - the International ISO standard 17442)
	LongName financialInstrumentFullName;	// Long name of the instrument
	String12 securityAltID;	// Expanded instrument description. Will contain either ISIN or CUSIP
	sbe::optional<SecurityAltIDSource,SecurityAltIDSource::NotPresent> securityAltIDSource;	// Identifies class or source of the SecurityAltID (455) value
	String5 priceQuoteMethod;	// Price quotation method
	String5 partyRoleClearingOrg;	// Clearing organization
	UserDefinedInstrument userDefinedInstrument;	// User-defined Instrument flag
	String6 riskSet;	// Risk Set identifies the list of instruments sharing credit limits set up
	String6 marketSet;	// Market Set defines the bilateral relationship and Self Match Prevention configuration for eligible markets
	sbe::optional<std::uint64_t,18446744073709551615ULL> instrumentGUID;	// External unique instrument ID
	// Number of repeating EventType entries.
	struct NoEvents {
		EventType eventType;	// Code to represent the type of event 
		uInt64 eventTime;	// Date and Time of instrument Activation or Expiration event sent as number of nanoseconds since Unix epoch
	};
	sbe::group<NoEvents,groupSize> noEvents;
	// Number of repeating FeedType repeating group entries.
	struct NoMDFeedTypes {
		MDFeedType mDFeedType;	// Describes a class of service for a given data feed. GBX- Real Book, GBI-Implied Book
		Int8 marketDepth;	// book depth
	};
	sbe::group<NoMDFeedTypes,groupSize> noMDFeedTypes;
	// Number of repeating InstrAttribType entries.
	struct NoInstAttrib {
		static constexpr std::int8_t instAttribType=24;	// Instrument eligibility attributes 
		InstAttribValue instAttribValue;	// Bitmap field of 32 Boolean type instrument eligibility flags 
	};
	sbe::group<NoInstAttrib,groupSize> noInstAttrib;
	// Number of entries 
	struct NoLotTypeRules {
		Int8 lotType;	// This tag is required to interpret the value in tag 1231-MinLotSize.
		DecimalQty minLotSize;	// Minimum quantity accepted for order entry. If tag 1093-LotType=4, this value is the minimum quantity for order entry expressed in the applicable units, specified in tag 996-UnitOfMeasure, (e.g., megawatts). If tag 1093-LotType= 5, this value represents order qty increment
	};
	sbe::group<NoLotTypeRules,groupSize> noLotTypeRules;
};

struct MDInstrumentDefinitionRepo58 {
	std::uint16_t msg_size;
	messageHeader message_header;
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<std::uint32_t,4294967295U> totNumReports;	// Total number of instruments in the Replay loop. Used on Replay Feed only.  
	SecurityUpdateAction securityUpdateAction;	// Last Security update action on Incremental feed, 'D' or 'M' is used when a mid-week deletion or modification (i.e. extension) occurs.
	uInt64 lastUpdateTime;	// Timestamp of when the instrument was last added, modified or deleted. Sent in number of nanoseconds since Unix epoch
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current state of the instrument
	Int16 applID;	// The channel ID as defined in the XML Configuration file
	uInt8 marketSegmentID;	// Identifies the market segment for all CME Globex instruments
	uInt8 underlyingProduct;	// Product complex
	SecurityExchange securityExchange;	// Exchange used to identify a security
	SecurityGroup securityGroup;	// Security Group Code
	Asset asset;	// The underlying asset code also known as Product Code 
	Symbol symbol;	// Instrument Name or Symbol 
	Int32 securityID;	// Unique instrument ID
	static constexpr char securityIDSource='8';	// Identifies class or source of the SecurityID (Tag 48) value
	SecurityType securityType;	// Security Type
	CFICode cFICode;	// ISO standard instrument categorization code.
	Currency currency;	// Identifies the currency for the instrument traded
	Currency settlCurrency;	// Identifies currency used for settlement
	CHAR matchAlgorithm;	// Matching Algorithm - CME assigned values
	uInt32 minTradeVol;	// The minimum trading volume for a security
	uInt32 maxTradeVol;	// The maximum trading volume for a security
	PRICE9 minPriceIncrement;	// Minimum constant tick for the instrument
	Decimal9 displayFactor;	// Contains the multiplier to convert the CME Globex display price to the conventional price.
	UnitOfMeasure unitOfMeasure;	// Unit of measure for the products' original contract size. This will be populated for all products listed on CME Globex
	Decimal9NULL unitOfMeasureQty;	// This field contains the contract size for each instrument. Use in combination with tag 996-UnitofMeasure
	PRICENULL9 tradingReferencePrice;	// Trading Reference price
	sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates session date corresponding to the price in tag 1150-TradingReferencePrice
	PRICENULL9 highLimitPrice;	// Allowable high limit price for the trading day
	PRICENULL9 lowLimitPrice;	// Allowable low limit price for the trading day
	PRICENULL9 maxPriceVariation;	// Differential value for price banding
	LongName financialInstrumentFullName;	// Long name of the instrument
	String5 partyRoleClearingOrg;	// Clearing organization
	sbe::optional<std::uint16_t,65535U> startDate;	// Start date of a financing deal, i.e. the date the buyer pays the seller cash and takes control of the collateral
	sbe::optional<std::uint16_t,65535U> endDate;	// End date of a financing deal, i.e. the date the seller reimburses the buyer and takes back control of the collateral
	String8 terminationType;	// For Repos the timing or method for terminating the agreement. Term code
	RepoSubType securitySubType;	// Repo Sub Security Type
	sbe::optional<MoneyOrPar,MoneyOrPar::NotPresent> moneyOrPar;	// Money or Par indicates if the GC is filled by par amount or by money amount
	uInt8 maxNoOfSubstitutions;	// Max number of substitutions allowed. The value of 0 indicates that substitutions are not allowed
	String5 priceQuoteMethod;	// Price quotation method
	UserDefinedInstrument userDefinedInstrument;	// User-defined instrument flag
	String6 riskSet;	// Risk Set identifies the list of instruments sharing credit limits set up
	String6 marketSet;	// MarketSet defines the bilateral relationship and Self Match Prevention configuration for eligible markets
	sbe::optional<std::uint64_t,18446744073709551615ULL> instrumentGUID;	// External unique instrument ID
	String20 termCode;	// Full Repo Term Code
	sbe::optional<std::uint8_t,255U> brokenDateTermType;	// Optionally used in tailor made repo contracts and defines the type of broken dates as requested by trader. Null = Not applicable, 0 = Custom, 1 = Quarterly,  2 = Monthly
	// Number of repeating EventType entries
	struct NoEvents {
		EventType eventType;	// Code to represent the type of event 
		uInt64 eventTime;	// Date and Time of Instrument Activation or Expiration event sent as number of nanoseconds since Unix epoch 
	};
	sbe::group<NoEvents,groupSize> noEvents;
	// Number of repeating FeedType repeating group entries.
	struct NoMDFeedTypes {
		MDFeedType mDFeedType;	// Describes a class of service for a given data feed. GBX- Real Book, GBI-Implied Book
		Int8 marketDepth;	// Book depth
	};
	sbe::group<NoMDFeedTypes,groupSize> noMDFeedTypes;
	// Number of repeating InstrAttribType entries
	struct NoInstAttrib {
		static constexpr std::int8_t instAttribType=24;	// Instrument eligibility attributes
		InstAttribValue instAttribValue;	// Bitmap field of 32 Boolean type indicators
	};
	sbe::group<NoInstAttrib,groupSize> noInstAttrib;
	// Number of entries
	struct NoLotTypeRules {
		Int8 lotType;	// This tag is required to interpret the value in tag 1231-MinLotSize.
		DecimalQty minLotSize;	// Minimum quantity accepted for order entry. If tag 1093-LotType=4, this value is the minimum quantity for order entry expressed in the applicable units, specified in tag 996-UnitOfMeasure, (e.g., megawatts). If tag 1093-LotType=5, this value represents order qty increment
	};
	sbe::group<NoLotTypeRules,groupSize> noLotTypeRules;
	// Number of underlying entries
	struct NoUnderlyings {
		UnderlyingSymbol underlyingSymbol;	// Underlying Instrument Symbol (Short Name). When the underlying is a Globex listed Fixed Income instrument this value will be the same as that contained in Security Definition Tag 55-Symbol of the underlying instrument
		sbe::optional<std::int32_t,2147483647> underlyingSecurityID;	// Underlying Security ID as qualified by tag 305-UnderlyingSecurityIDSource. Provided only if the underlying is a Globex listed instrument, this value will be the same as that contained in Security Definition Tag 48-SecurityID.
		static constexpr char underlyingSecurityIDSource='8';	// Identifies the class or source of UnderlyingSecurityID Tag 309 value.  Always '8' for CME assigned IDs
		String12 underlyingSecurityAltID;	// Underlying Alternate Security identifier value as qualified by Tag 305-UnderlyingSecuityAltIDSource (e.g. CUSIP, ISIN, etc). For Repo special will contain underlying CUSIP or ISIN. For GC Repo may contain a synthetic CUSIP or ISIN representing a basket
		sbe::optional<SecurityAltIDSource,SecurityAltIDSource::NotPresent> underlyingSecurityAltIDSource;	// Identifies class or source of the UnderlyingSecurityAltID (458) value
		LongName underlyingFinancialInstrumentFullName;	//  Long Name of the Underlying Instrument. For the instruments listed on Globex this value will be the same as of that contained in Security Definition Tag  2714-FinancialInstrumentFullName
		SecurityType underlyingSecurityType;	// Underlying Security Type
		CountryCode underlyingCountryOfIssue;	// Underlying Security's CountryOfIssue. See CountryOfIssue (470) field for description
		String25 underlyingIssuer;	// Underlying Security's Issuer. See Tag 106-Issuer field for description
		sbe::optional<std::uint8_t,255U> underlyingMaxLifeTime;	// Max life time of the underlying instruments qualifying for the GC basket in number of year. Will contain null value for Repo specials
		sbe::optional<std::uint16_t,65535U> underlyingMinDaysToMaturity;	// Minimum days to maturity remaining of the underlying instruments to qualify for GC basket. Will contain null value for Repo specials
		sbe::optional<std::uint64_t,18446744073709551615ULL> underlyingInstrumentGUID;	// Underlying GUID. For Repo specials populated with individual instrument GUID of the underlying security
		sbe::optional<std::uint16_t,65535U> underlyingMaturityDate;	// Underlying Security's Maturity Date. Will be populated with Maturity Date of the underlying security instrument for Repo Specials only
	};
	sbe::group<NoUnderlyings,groupSize> noUnderlyings;
	// Number of related instruments group
	struct NoRelatedInstruments {
		Int32 relatedSecurityID;	// Related Security ID. For regular Repo contract will contain SecurityID of AoN Repo for the same underlying product, term, start and end dates.  And vice versa - for AoN Repo will contain the related regular Repo SecurityID
		static constexpr char relatedSecurityIDSource='8';	// Related Security ID Source
		Symbol relatedSymbol;	// Related Instrument Symbol
		sbe::optional<std::uint64_t,18446744073709551615ULL> relatedInstrumentGUID;	// Related Instrument GUID
	};
	sbe::group<NoRelatedInstruments,groupSize> noRelatedInstruments;
	// This group indicates the number of broken dates and references individual broken contracts in user defined tailor made repo. Applicable only to tailor made repos requested by traders with broken dates
	struct NoBrokenDates {
		uInt64 brokenDateGUID;	// External unique broken date Instrument ID
		Int32 brokenDateSecurityID;	// Broken date Instrument Globex Security ID
		sbe::optional<std::uint16_t,65535U> brokenDateStart;	// Start date of a broken date period
		sbe::optional<std::uint16_t,65535U> brokenDateEnd;	// End date of a broken date period
	};
	sbe::group<NoBrokenDates,groupSize> noBrokenDates;
};

struct SnapshotRefreshTopOrders59 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	Int32 securityID;	// Security ID
	// Number of data blocks following
	struct NoMDEntries {
		uInt64 orderID;	// Order ID
		uInt64 mDOrderPriority;	// Order priority for execution on the order book
		PRICE9 mDEntryPx;	// Order price
		Int32 mDDisplayQty;	// Visible qty of order
		MDEntryTypeBook mDEntryType;	// Market Data entry type
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct SecurityStatusWorkup60 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	PRICENULL9 mDEntryPx;	// Workup price
	Int32 securityID;	// Security ID 
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<std::uint16_t,65535U> tradeDate;	// Trade Date
	uInt32 tradeLinkID;	// Contains the workup ID; unique per instrument per day
	WorkupTradingStatus securityTradingStatus;	// Identifies the trading status applicable to the instrument 
	HaltReason haltReason;	// Indicates halt reason status due to surveillance activity
	SecurityTradingEvent securityTradingEvent;	// Indicates the trading status applicable to the transaction
	// Number of OrderID entries
	struct NoOrderIDEntries {
		uInt64 orderID;	// Unique Order ID assigned by the exchange
		Side side;	// Side of order
		sbe::optional<AggressorFlag,AggressorFlag::NotPresent> aggressorIndicator;	// Aggressor Indicator 1=Aggressor Order 0=Passive Order
	};
	sbe::group<NoOrderIDEntries,groupSize> noOrderIDEntries;
};

struct SnapshotFullRefreshTCP61 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	Int32 securityID;	// Unique instrument ID 
	PRICENULL9 highLimitPrice;	// Upper price threshold for the instrument. Orders submitted with prices above the upper limit will be rejected. 
	PRICENULL9 lowLimitPrice;	// Lower price threshold for the instrument. Orders submitted with prices below the lower limit will be rejected. 
	PRICENULL9 maxPriceVariation;	// Differential static value for price banding.  
	// Number of data blocks listed in the Incremental message
	struct NoMDEntries {
		PRICENULL9 mDEntryPx;	// Price of the Market Data Entry
		sbe::optional<std::int32_t,2147483647> mDEntrySize;	// Quantity of the MD Entry. 
		sbe::optional<std::int32_t,2147483647> tradeableSize;	// Tradeable qty
		sbe::optional<std::int32_t,2147483647> numberOfOrders;	// Aggregate number of orders at given price level. In Trade Entry - Identifies the total number of real orders per instrument that participated in a match step within a match event. 
		sbe::optional<std::int8_t,127> mDPriceLevel;	// Aggregate book price level, number from 1 to 10
		sbe::optional<OpenCloseSettlFlag,OpenCloseSettlFlag::NotPresent> openCloseSettlFlag;	// Flag that identifies a market data entry
		MDEntryType mDEntryType;	// Market Data Entry Type
		sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Trading session date corresponding to a statistic entry, applicable only to Daily Statistics
		SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct CollateralMarketValue62 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Time of execution/order creation; expressed in UTC.
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of data blocks listed in the Incremental message
	struct NoMDEntries {
		String12 underlyingSecurityAltID;	// Will contain either CUSIP or ISIN value identifying REPO collateral security
		sbe::optional<SecurityAltIDSource,SecurityAltIDSource::NotPresent> underlyingSecurityAltIDSource;	// Identifies class or source of the UnderlyingSecurityAltID (458) value
		PRICE9 collateralMarketPrice;	// Market price of the collateral, either from external market sources or a result of trading activity on the platform. Clean price
		PRICE9 dirtyPrice;	// Dirty Price   
		uInt64 underlyingInstrumentGUID;	// Underlying Instrument GUID. Collateral security identifier in REF Data API services
		sbe::optional<PriceSource,PriceSource::NotPresent> mDStreamID;	// Source of the Clean Price
		tc::padding<2> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDInstrumentDefinitionFX63 {
	std::uint16_t msg_size;
	messageHeader message_header;
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<std::uint32_t,4294967295U> totNumReports;	// Total number of instruments in the Replay loop. Used on Replay Feed only
	SecurityUpdateAction securityUpdateAction;	// Last Security update action on Incremental feed, 'D' or 'M' is used when a mid-week deletion or modification (i.e. extension) occurs
	uInt64 lastUpdateTime;	// Timestamp of when the instrument was last added, modified or deleted
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current state of the instrument. In Security Definition message this tag is available in the Instrument Replay feed only
	Int16 applID;	// The channel ID as defined in the XML Configuration file
	uInt8 marketSegmentID;	// Identifies the market segment, populated for all CME Globex instruments
	uInt8 underlyingProduct;	// Product complex
	SecurityExchange securityExchange;	// Exchange used to identify a security
	SecurityGroup securityGroup;	// Security Group Code
	Asset asset;	// The underlying asset code also known as Product Code
	Symbol symbol;	// Instrument Name or Symbol
	Int32 securityID;	// Unique instrument ID
	static constexpr char securityIDSource='8';	// Identifies class or source of tag 48-SecurityID value
	SecurityType securityType;	// Security Type
	CFICode cFICode;	// ISO standard instrument categorization code
	Currency currency;	// Base currency
	Currency settlCurrency;	// Currency used for settlement, which may be different from Local currency specified in Tag 1524 PriceQuoteCurrency
	Currency priceQuoteCurrency;	// Local (counter) currency
	CHAR matchAlgorithm;	// Matching algorithm
	uInt32 minTradeVol;	// The minimum trading volume for a security
	uInt32 maxTradeVol;	// The maximum trading volume for a security
	PRICE9 minPriceIncrement;	// Minimum price tick
	Decimal9 displayFactor;	// Contains the multiplier to convert the CME Globex display price to the conventional price
	uInt8 pricePrecision;	// Specifies price decimal precision for EBS instrument
	UnitOfMeasure unitOfMeasure;	// Unit of measure for the products' original contract size. This will be populated for all products listed on CME Globex
	Decimal9NULL unitOfMeasureQty;	// This field contains the contract size for each instrument. Used in combination with tag 996-UnitofMeasure
	PRICENULL9 highLimitPrice;	// Allowable high limit price for the trading day
	PRICENULL9 lowLimitPrice;	// Allowable low limit price for the trading day
	PRICENULL9 maxPriceVariation;	// Differential value for price banding.
	UserDefinedInstrument userDefinedInstrument;	// User-defined instruments flag
	LongName financialInstrumentFullName;	// EBS instrument long name
	String7 fXCurrencySymbol;	// Base/Local. Denotes the currency pair in CCY1/CCY2 convention
	String3 settlType;	// For SPOTs will contain 0. For Fixed date NDFs will contain the value 'B'. For the standard NDFs tenors expressed using Dx, Mx, Wx, and Yx values, where 'x' does not denote business days, but calendar days
	uInt16 interveningDays;	// For SPOT, number of business days between trade date and value (settlement) date. For NDF, number of business days between NDF valuation (fixing) and settlement
	String20 fXBenchmarkRateFix;	// Fixing Rate Description
	String12 rateSource;	// Fixing Rate Source
	String8 fixRateLocalTime;	// Fixing Rate Local Time, denoted in HH:MM:SS format
	String20 fixRateLocalTimeZone;	// Fixing Rate Local Time Zone corresponding to Fixing Local Time.
	uInt32 minQuoteLife;	// Minimum Quote Life in number of microseconds
	PRICE9 maxPriceDiscretionOffset;	// Max allowed discretionary offset from Limit order price. When the value in this field = 0, discretionary price cannot be submitted for the instrument
	sbe::optional<std::uint64_t,18446744073709551615ULL> instrumentGUID;	// External unique instrument ID
	MaturityMonthYear maturityMonthYear;	// Fixed Date NDF Maturity
	String8 settlementLocale;	// Settlement Locale. Optionally used to differentiate settlement location
	PRICENULL9 altMinPriceIncrement;	// New sub-tick which is only available for order entry when certain conditions are met, tick value which corresponds to the Alt Min Quote Life
	sbe::optional<std::uint32_t,4294967295U> altMinQuoteLife;	// MQL duration in number of microseconds applied to orders at AltMinPriceIncrement
	PRICENULL9 altPriceIncrementConstraint;	// Minimum price offset better than the best Standard Tick order for an order to be allowed into the market
	PRICENULL9 maxBidAskConstraint;	// Maximum bid/ask spread for which sub-tick orders will be accepted (Sub tick orders will be rejected if bid/ask spread is greater than this value)
	// Number of EventType entries
	struct NoEvents {
		EventType eventType;	// Code to represent the type of event
		uInt64 eventTime;	// Date and Time of instument Activation or Expiration event sent as number of nanoseconds since Unix epoch
	};
	sbe::group<NoEvents,groupSize> noEvents;
	// Number of FeedType entries
	struct NoMDFeedTypes {
		MDFeedType mDFeedType;	// Describes a class of service for a given data feed
		Int8 marketDepth;	// Book depth
	};
	sbe::group<NoMDFeedTypes,groupSize> noMDFeedTypes;
	// Number of InstrAttribType entries
	struct NoInstAttrib {
		static constexpr std::int8_t instAttribType=24;	// Instrument eligibility attributes
		InstAttribValue instAttribValue;	// Bitmap field of 32 Boolean type instrument eligibility flags
	};
	sbe::group<NoInstAttrib,groupSize> noInstAttrib;
	// Number of LotTypeRules entries
	struct NoLotTypeRules {
		Int8 lotType;	// This tag is required to interpret the value in tag 1231-MinLotSize
		uInt64 minLotSize;	// For FX instruments in the repeating group with Tag 1093-LotType=2, Tag 1231-MinLotSize provides a Regular Amount - a default order size on the Workstation screen. With tag 1093-LotType= 5, Tag 1231-MinLotSize value represents standard min order qty increment.  With  tag 1093-LotType=6 tag 1231-MinLotSize contains SizePriorityQty for instruments trading with Match Algorithm = P (Size Priority)
	};
	sbe::group<NoLotTypeRules,groupSize> noLotTypeRules;
	// Number of scheduled Trading Dates
	struct NoTradingSessions {
		sbe::optional<std::uint16_t,65535U> tradeDate;	// Trade Date
		sbe::optional<std::uint16_t,65535U> settlDate;	// Settle (Value) Date corresponding to Trade Date
		sbe::optional<std::uint16_t,65535U> maturityDate;	// For Spot instruments will not contain the value. For NDFs, the valuation (fixing) date of the NDF.  For Fixed Date NDFs Value Date and Maturity Date remain constant for all Trade Dates
		String12 securityAltID;	// ISIN value as provided by ANNA, Association of National Numbering Agencies. This field is populated for MTF-Regulated NDFs and is unique for each Settle Date
		static constexpr std::uint8_t securityAltIDSource=4U;	// Identifies class or source of the SecurityAltID (455) value
	};
	sbe::group<NoTradingSessions,groupSize> noTradingSessions;
};

struct MDIncrementalRefreshBookLongQty64 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message.
	struct NoMDEntries {
		PRICENULL9 mDEntryPx;	// Market Data entry price
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDEntrySize;	// Aggregate booked qty at price level, notional
		Int32 securityID;	// SecurityID
		uInt32 rptSeq;	// Market Data entry sequence number per instrument update
		sbe::optional<std::int32_t,2147483647> numberOfOrders;	// In Book entry - aggregate number of orders at given price level 
		uInt8 mDPriceLevel;	// Aggregate book level
		MDUpdateAction mDUpdateAction;	// Market Data update action
		MDEntryTypeBook mDEntryType;	// Market Data entry type 
		tc::padding<1> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
	// Number of OrderID entries
	struct NoOrderIDEntries {
		uInt64 orderID;	// Unique Order ID
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDOrderPriority;	// Order priority for execution on the order book
		sbe::optional<std::int32_t,2147483647> mDDisplayQty;	// Visible qty of order
		sbe::optional<std::uint8_t,255U> referenceID;	// Reference to corresponding Price and SecurityID, sequence of MD entry in the message
		OrderUpdateAction orderUpdateAction;	// Order book update action to be applied to the order referenced by OrderID
		tc::padding<2> padding;
	};
	sbe::group<NoOrderIDEntries,groupSize8Byte> noOrderIDEntries;
};

struct MDIncrementalRefreshTradeSummaryLongQty65 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of Trade Summary entries
	struct NoMDEntries {
		PRICE9 mDEntryPx;	// Trade price
		uInt64 mDEntrySize;	// Consolidated trade quantity, notional
		Int32 securityID;	// Security ID
		uInt32 rptSeq;	// MD Entry sequence number per instrument update. Reset weekly.
		Int32 numberOfOrders;	// The total number of real orders per instrument that participated in a match step within a match event
		uInt32 mDTradeEntryID;	// Market Data Trade Entry ID
		sbe::optional<AggressorSide,AggressorSide::NotPresent> aggressorSide;	// Indicates which side is the aggressor or if there is no aggressor
		MDUpdateAction mDUpdateAction;	// Market Data update action
		static constexpr char mDEntryType='2';	// Market Data entry type 
		tc::padding<6> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
	// Number of OrderID and LastQty entries in Trade Summary message
	struct NoOrderIDEntries {
		uInt64 orderID;	// Unique order identifier as assigned by the exchange
		Int32 lastQty;	// Quantity bought or sold on this last fill
		tc::padding<4> padding;
	};
	sbe::group<NoOrderIDEntries,groupSize8Byte> noOrderIDEntries;
};

struct MDIncrementalRefreshVolumeLongQty66 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		uInt64 mDEntrySize;	// Cumulative traded volume, notional 
		Int32 securityID;	// Security ID
		uInt32 rptSeq;	// Market Data entry sequence number per instrument update
		MDUpdateAction mDUpdateAction;	// Market Data update action
		static constexpr char mDEntryType='e';	// Electronic Volume entry provides cumulative session trade volume updated with the event 
		tc::padding<7> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDIncrementalRefreshSessionStatisticsLongQty67 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICE9 mDEntryPx;	// Market Data entry price
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDEntrySize;	// Indicative Opening Quantity
		Int32 securityID;	// Security ID
		uInt32 rptSeq;	// MD Entry sequence number per instrument update
		sbe::optional<OpenCloseSettlFlag,OpenCloseSettlFlag::NotPresent> openCloseSettlFlag;	// Flag that additionally describes market data entry type
		MDUpdateAction mDUpdateAction;	// Market Data update action
		MDEntryTypeStatistics mDEntryType;	// Market Data entry type
		tc::padding<5> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct SnapshotFullRefreshTCPLongQty68 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event. Set to last on the last Snapshot message sent in reply to customer request for snapshot
	Int32 securityID;	// Security ID 
	PRICENULL9 highLimitPrice;	// Upper price threshold for the instrument. Orders submitted with prices above the upper limit will be rejected
	PRICENULL9 lowLimitPrice;	// Lower price threshold for the instrument. Orders submitted with prices below the lower limit will be rejected
	PRICENULL9 maxPriceVariation;	// Differential static value for price banding
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL9 mDEntryPx;	// Market Data entry price
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDEntrySize;	// Market Data entry size
		sbe::optional<std::int32_t,2147483647> numberOfOrders;	// In Book entry - aggregate number of orders at given price level. In Trade entry - number of real orders per instrument that participated in a match step within a match event 
		sbe::optional<std::uint8_t,255U> mDPriceLevel;	// Aggregate book level
		sbe::optional<OpenCloseSettlFlag,OpenCloseSettlFlag::NotPresent> openCloseSettlFlag;	// Flag that additionally describes market data entry type
		MDEntryType mDEntryType;	// Market Data entry type
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct SnapshotFullRefreshLongQty69 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt32 lastMsgSeqNumProcessed;	// Sequence number of the last Incremental feed packet processed. This value is used to synchronize the snapshot loop with the real-time feed
	uInt32 totNumReports;	// Total number of instruments in the Replay loop. Used on Replay Feed only.  
	Int32 securityID;	// Unique instrument ID 
	uInt32 rptSeq;	// MD Entry sequence number per instrument update. Reset weekly.
	uInt64 transactTime;	// Timestamp of the last event security participated in, sent as number of nanoseconds since Unix epoch
	uInt64 lastUpdateTime;	// UTC Date and time of last Security Definition add, update or delete on a given Market Data channel
	sbe::optional<std::uint16_t,65535U> tradeDate;	// Trade session date sent as number of days since Unix epoch
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current trading state of the instrument
	PRICENULL9 highLimitPrice;	// Upper price threshold for the instrument. Orders submitted with prices above the upper limit will be rejected
	PRICENULL9 lowLimitPrice;	// Lower price threshold for the instrument. Orders submitted with prices below the lower limit will be rejected
	PRICENULL9 maxPriceVariation;	// Differential value for price banding
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL9 mDEntryPx;	// Market Data entry price
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDEntrySize;	// Market Data entry size
		sbe::optional<std::int32_t,2147483647> numberOfOrders;	// In Book Entry - Aggregate number of orders at given price level. In Trade Entry - a total number of real orders per instrument that participated in a match step within a match event. 
		sbe::optional<std::uint8_t,255U> mDPriceLevel;	// Aggregate book level
		sbe::optional<OpenCloseSettlFlag,OpenCloseSettlFlag::NotPresent> openCloseSettlFlag;	// Flag that additionally describes a market data entry
		MDEntryType mDEntryType;	// Market Data entry type 
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct extended_message_header  {
	std::uint16_t msg_size;
	std::uint16_t blockLength;
	std::uint16_t templateId;
	std::uint16_t schemaId;
	std::uint16_t version;
};
tc::options<tc::flag::little_endian> protocol_options(...);

using messages = std::variant<
	AdminHeartbeat12,
	AdminLogin15,
	AdminLogout16,
	SecurityStatus30,
	MDIncrementalRefreshVolume37,
	QuoteRequest39,
	ChannelReset4,
	MDIncrementalRefreshBook46,
	MDIncrementalRefreshOrderBook47,
	MDIncrementalRefreshTradeSummary48,
	MDIncrementalRefreshDailyStatistics49,
	MDIncrementalRefreshLimitsBanding50,
	MDIncrementalRefreshSessionStatistics51,
	SnapshotFullRefresh52,
	SnapshotFullRefreshOrderBook53,
	MDInstrumentDefinitionFuture54,
	MDInstrumentDefinitionOption55,
	MDInstrumentDefinitionSpread56,
	MDInstrumentDefinitionFixedIncome57,
	MDInstrumentDefinitionRepo58,
	SnapshotRefreshTopOrders59,
	SecurityStatusWorkup60,
	SnapshotFullRefreshTCP61,
	CollateralMarketValue62,
	MDInstrumentDefinitionFX63,
	MDIncrementalRefreshBookLongQty64,
	MDIncrementalRefreshTradeSummaryLongQty65,
	MDIncrementalRefreshVolumeLongQty66,
	MDIncrementalRefreshSessionStatisticsLongQty67,
	SnapshotFullRefreshTCPLongQty68,
	SnapshotFullRefreshLongQty69
>;

} // namespace cme::mdp3::v13

template <> struct tc::type_id<cme::mdp3::v13::messages> { using type = tc::proto_type_id<&cme::mdp3::v13::extended_message_header::templateId>;};
template<> struct tc::type_id<cme::mdp3::v13::AdminHeartbeat12> { constexpr std::uint16_t operator()() const noexcept { return 12;} };
template<> struct tc::type_id<cme::mdp3::v13::AdminLogin15> { constexpr std::uint16_t operator()() const noexcept { return 15;} };
template<> struct tc::type_id<cme::mdp3::v13::AdminLogout16> { constexpr std::uint16_t operator()() const noexcept { return 16;} };
template<> struct tc::type_id<cme::mdp3::v13::SecurityStatus30> { constexpr std::uint16_t operator()() const noexcept { return 30;} };
template<> struct tc::type_id<cme::mdp3::v13::MDIncrementalRefreshVolume37> { constexpr std::uint16_t operator()() const noexcept { return 37;} };
template<> struct tc::type_id<cme::mdp3::v13::QuoteRequest39> { constexpr std::uint16_t operator()() const noexcept { return 39;} };
template<> struct tc::type_id<cme::mdp3::v13::ChannelReset4> { constexpr std::uint16_t operator()() const noexcept { return 4;} };
template<> struct tc::type_id<cme::mdp3::v13::MDIncrementalRefreshBook46> { constexpr std::uint16_t operator()() const noexcept { return 46;} };
template<> struct tc::type_id<cme::mdp3::v13::MDIncrementalRefreshOrderBook47> { constexpr std::uint16_t operator()() const noexcept { return 47;} };
template<> struct tc::type_id<cme::mdp3::v13::MDIncrementalRefreshTradeSummary48> { constexpr std::uint16_t operator()() const noexcept { return 48;} };
template<> struct tc::type_id<cme::mdp3::v13::MDIncrementalRefreshDailyStatistics49> { constexpr std::uint16_t operator()() const noexcept { return 49;} };
template<> struct tc::type_id<cme::mdp3::v13::MDIncrementalRefreshLimitsBanding50> { constexpr std::uint16_t operator()() const noexcept { return 50;} };
template<> struct tc::type_id<cme::mdp3::v13::MDIncrementalRefreshSessionStatistics51> { constexpr std::uint16_t operator()() const noexcept { return 51;} };
template<> struct tc::type_id<cme::mdp3::v13::SnapshotFullRefresh52> { constexpr std::uint16_t operator()() const noexcept { return 52;} };
template<> struct tc::type_id<cme::mdp3::v13::SnapshotFullRefreshOrderBook53> { constexpr std::uint16_t operator()() const noexcept { return 53;} };
template<> struct tc::type_id<cme::mdp3::v13::MDInstrumentDefinitionFuture54> { constexpr std::uint16_t operator()() const noexcept { return 54;} };
template<> struct tc::type_id<cme::mdp3::v13::MDInstrumentDefinitionOption55> { constexpr std::uint16_t operator()() const noexcept { return 55;} };
template<> struct tc::type_id<cme::mdp3::v13::MDInstrumentDefinitionSpread56> { constexpr std::uint16_t operator()() const noexcept { return 56;} };
template<> struct tc::type_id<cme::mdp3::v13::MDInstrumentDefinitionFixedIncome57> { constexpr std::uint16_t operator()() const noexcept { return 57;} };
template<> struct tc::type_id<cme::mdp3::v13::MDInstrumentDefinitionRepo58> { constexpr std::uint16_t operator()() const noexcept { return 58;} };
template<> struct tc::type_id<cme::mdp3::v13::SnapshotRefreshTopOrders59> { constexpr std::uint16_t operator()() const noexcept { return 59;} };
template<> struct tc::type_id<cme::mdp3::v13::SecurityStatusWorkup60> { constexpr std::uint16_t operator()() const noexcept { return 60;} };
template<> struct tc::type_id<cme::mdp3::v13::SnapshotFullRefreshTCP61> { constexpr std::uint16_t operator()() const noexcept { return 61;} };
template<> struct tc::type_id<cme::mdp3::v13::CollateralMarketValue62> { constexpr std::uint16_t operator()() const noexcept { return 62;} };
template<> struct tc::type_id<cme::mdp3::v13::MDInstrumentDefinitionFX63> { constexpr std::uint16_t operator()() const noexcept { return 63;} };
template<> struct tc::type_id<cme::mdp3::v13::MDIncrementalRefreshBookLongQty64> { constexpr std::uint16_t operator()() const noexcept { return 64;} };
template<> struct tc::type_id<cme::mdp3::v13::MDIncrementalRefreshTradeSummaryLongQty65> { constexpr std::uint16_t operator()() const noexcept { return 65;} };
template<> struct tc::type_id<cme::mdp3::v13::MDIncrementalRefreshVolumeLongQty66> { constexpr std::uint16_t operator()() const noexcept { return 66;} };
template<> struct tc::type_id<cme::mdp3::v13::MDIncrementalRefreshSessionStatisticsLongQty67> { constexpr std::uint16_t operator()() const noexcept { return 67;} };
template<> struct tc::type_id<cme::mdp3::v13::SnapshotFullRefreshTCPLongQty68> { constexpr std::uint16_t operator()() const noexcept { return 68;} };
template<> struct tc::type_id<cme::mdp3::v13::SnapshotFullRefreshLongQty69> { constexpr std::uint16_t operator()() const noexcept { return 69;} };
