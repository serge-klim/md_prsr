#pragma once
#include "md_prsr/cme/mdp3/sbe.hpp"
#include "transcoder/byte_order.hpp"
#include "transcoder/options.hpp"
#include "transcoder/basic_types.hpp"
#include <boost/detail/bitmask.hpp>
#include <variant>
#include <array>
#include <cstdint>


// auto generated by cme_gen(WIP) from : https://www.cmegroup.com/ftp/SBEFix/Production/Templates/templates_FixBinary.xml

namespace cme::mdp3::v9 {

using Asset = std::array<char,6>;
using CFICode = std::array<char,6>;
using CHAR = char;
using Currency = std::array<char,3>;
using Int16 = std::int16_t;
using Int32 = std::int32_t;
using Int8 = std::int8_t;
using MDFeedType = std::array<char,3>;
using QuoteReqId = std::array<char,23>;
using SecurityExchange = std::array<char,4>;
using SecurityGroup = std::array<char,6>;
using SecuritySubType = std::array<char,5>;
using SecurityType = std::array<char,6>;
using Symbol = std::array<char,20>;
using Text = std::array<char,180>;
using UnderlyingSymbol = std::array<char,20>;
using UnitOfMeasure = std::array<char,30>;
using UserDefinedInstrument = std::array<char,1>;
using uInt32 = std::uint32_t;
using uInt64 = std::uint64_t;
using uInt8 = std::uint8_t;
struct Decimal9 {
	std::int64_t mantissa;
	static constexpr std::int8_t exponent=-9;
};
struct Decimal9NULL {
	sbe::optional<std::int64_t,9223372036854775807> mantissa;
	static constexpr std::int8_t exponent=-9;
};
struct DecimalQty {
	sbe::optional<std::int32_t,2147483647> mantissa;
	static constexpr std::int8_t exponent=-4;
};
struct FLOAT {
	std::int64_t mantissa;
	static constexpr std::int8_t exponent=-7;
};
struct MaturityMonthYear {
	sbe::optional<std::uint16_t,65535> year;
	sbe::optional<std::uint8_t,255> month;
	sbe::optional<std::uint8_t,255> day;
	sbe::optional<std::uint8_t,255> week;
};
struct PRICE {
	std::int64_t mantissa;
	static constexpr std::int8_t exponent=-7;
};
struct PRICE9 {
	std::int64_t mantissa;
	static constexpr std::int8_t exponent=-9;
};
struct PRICENULL {
	sbe::optional<std::int64_t,9223372036854775807> mantissa;
	static constexpr std::int8_t exponent=-7;
};
struct PRICENULL9 {
	sbe::optional<std::int64_t,9223372036854775807> mantissa;
	static constexpr std::int8_t exponent=-9;
};
struct groupSize {
	std::uint16_t blockLength;
	std::uint8_t numInGroup;
};
struct groupSize8Byte {
	std::uint16_t blockLength;
		tc::padding<5> padding_1;
std::uint8_t numInGroup;
};
struct groupSizeEncoding {
	std::uint16_t blockLength;
	std::uint16_t numInGroup;
};
struct messageHeader {
	std::uint16_t blockLength;
	std::uint16_t templateId;
	std::uint16_t schemaId;
	std::uint16_t version;
};
enum class AggressorSide : std::uint8_t { 
	NoAggressor=0U,
	Buy=1U,
	Sell=2U,
	NotPresent=255U
};
enum class EventType : uInt8 { 
	Activation=5U,
	LastEligibleTradeDate=7U
};
enum class HaltReason : uInt8 { 
	GroupSchedule=0U,
	SurveillanceIntervention=1U,
	MarketEvent=2U,
	InstrumentActivation=3U,
	InstrumentExpiration=4U,
	Unknown=5U,
	RecoveryInProcess=6U
};
enum class LegSide : uInt8 { 
	BuySide=1U,
	SellSide=2U
};
enum class MDEntryType : CHAR { 
	Bid='0',
	Offer='1',
	Trade='2',
	OpenPrice='4',
	SettlementPrice='6',
	TradingSessionHighPrice='7',
	TradingSessionLowPrice='8',
	ClearedVolume='B',
	OpenInterest='C',
	ImpliedBid='E',
	ImpliedOffer='F',
	BookReset='J',
	SessionHighBid='N',
	SessionLowOffer='O',
	FixingPrice='W',
	ElectronicVolume='e',
	ThresholdLimitsandPriceBandVariation='g'
};
enum class MDEntryTypeBook : CHAR { 
	Bid='0',
	Offer='1',
	ImpliedBid='E',
	ImpliedOffer='F',
	BookReset='J'
};
enum class MDEntryTypeDailyStatistics : CHAR { 
	SettlementPrice='6',
	ClearedVolume='B',
	OpenInterest='C',
	FixingPrice='W'
};
enum class MDEntryTypeStatistics : CHAR { 
	OpenPrice='4',
	HighTrade='7',
	LowTrade='8',
	HighestBid='N',
	LowestOffer='O'
};
enum class MDUpdateAction : uInt8 { 
	New=0U,
	Change=1U,
	Delete=2U,
	DeleteThru=3U,
	DeleteFrom=4U,
	Overlay=5U
};
enum class OpenCloseSettlFlag : std::uint8_t { 
	DailyOpenPrice=0U,
	IndicativeOpeningPrice=5U,
	NotPresent=255U
};
enum class OrderUpdateAction : uInt8 { 
	New=0U,
	Update=1U,
	Delete=2U
};
enum class PutOrCall : uInt8 { 
	Put=0U,
	Call=1U
};
enum class SecurityTradingEvent : uInt8 { 
	NoEvent=0U,
	NoCancel=1U,
	ResetStatistics=4U,
	ImpliedMatchingON=5U,
	ImpliedMatchingOFF=6U
};
enum class SecurityTradingStatus : std::uint8_t { 
	TradingHalt=2U,
	Close=4U,
	NewPriceIndication=15U,
	ReadyToTrade=17U,
	NotAvailableForTrading=18U,
	UnknownorInvalid=20U,
	PreOpen=21U,
	PreCross=24U,
	Cross=25U,
	PostClose=26U,
	NoChange=103U,
	NotPresent=255U
};
enum class SecurityUpdateAction : CHAR { 
	Add='A',
	Delete='D',
	Modify='M'
};
enum class InstAttribValue : uInt32 { 
	ElectronicMatchEligible=1 << 0U,
	OrderCrossEligible=1 << 1U,
	BlockTradeEligible=1 << 2U,
	EFPEligible=1 << 3U,
	EBFEligible=1 << 4U,
	EFSEligible=1 << 5U,
	EFREligible=1 << 6U,
	OTCEligible=1 << 7U,
	iLinkIndicativeMassQuotingEligible=1 << 8U,
	NegativeStrikeEligible=1 << 9U,
	NegativePriceOutrightEligible=1 << 10U,
	IsFractional=1 << 11U,
	VolatilityQuotedOption=1 << 12U,
	RFQCrossEligible=1 << 13U,
	ZeroPriceOutrightEligible=1 << 14U,
	DecayingProductEligibility=1 << 15U,
	VariableProductEligibility=1 << 16U,
	DailyProductEligibility=1 << 17U,
	GTOrdersEligibility=1 << 18U,
	ImpliedMatchingEligibility=1 << 19U,
	TriangulationEligible=1 << 20U,
	VariableCabEligible=1 << 21U
};
BOOST_BITMASK(InstAttribValue)

enum class MatchEventIndicator : uInt8 { 
	LastTradeMsg=1 << 0U,
	LastVolumeMsg=1 << 1U,
	LastQuoteMsg=1 << 2U,
	LastStatsMsg=1 << 3U,
	LastImpliedMsg=1 << 4U,
	RecoveryMsg=1 << 5U,
	Reserved=1 << 6U,
	EndOfEvent=1 << 7U
};
BOOST_BITMASK(MatchEventIndicator)

enum class SettlPriceType : uInt8 { 
	FinalDaily=1 << 0U,
	Actual=1 << 1U,
	Rounded=1 << 2U,
	Intraday=1 << 3U,
	ReservedBits=1 << 4U,
	NullValue=1 << 7U
};
BOOST_BITMASK(SettlPriceType)

struct ChannelReset4 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	// Number of entries in Market Data message
	struct NoMDEntries {
		static constexpr std::int8_t mDUpdateAction=0;	// Market Data update action
		static constexpr char mDEntryType='J';	// Market Data entry type  
		Int16 applID;	// Indicates the channel ID as defined in the XML configuration file
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct AdminHeartbeat12 {
	std::uint16_t msg_size;
	messageHeader message_header;
};

struct AdminLogin15 {
	std::uint16_t msg_size;
	messageHeader message_header;
	Int8 heartBtInt;	// Heartbeat interval (seconds)
};

struct AdminLogout16 {
	std::uint16_t msg_size;
	messageHeader message_header;
	Text text;	// Free format text string. May include logout confirmation or reason for logout
};

struct MDInstrumentDefinitionFuture27 {
	std::uint16_t msg_size;
	messageHeader message_header;
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<std::uint32_t,4294967295U> totNumReports;	// Total number of instruments in the Replay loop. Used on Replay Feed only 
	SecurityUpdateAction securityUpdateAction;	// Last Security update action on Incremental feed, 'D' or 'M' is used when a mid-week deletion or modification (i.e. extension) occurs
	uInt64 lastUpdateTime;	// Timestamp of when the instrument was last added, modified or deleted
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current state of the instrument. In Security Definition message this tag is available in the Instrument Replay feed only 
	Int16 applID;	// The channel ID as defined in the XML Configuration file
	uInt8 marketSegmentID;	// Identifies the market segment, populated for all CME Globex instruments
	uInt8 underlyingProduct;	// Product complex
	SecurityExchange securityExchange;	// Exchange used to identify a security
	SecurityGroup securityGroup;	// Security Group Code.
	Asset asset;	// The underlying asset code also known as Product Code
	Symbol symbol;	// Instrument Name or Symbol 
	Int32 securityID;	// Unique instrument ID
	static constexpr char securityIDSource='8';	// Identifies class or source of tag 48-SecurityID value
	SecurityType securityType;	// Security Type
	CFICode cFICode;	// ISO standard instrument categorization code
	MaturityMonthYear maturityMonthYear;	// This field provides the actual calendar date for contract maturity
	Currency currency;	// Identifies currency used for price
	Currency settlCurrency;	// Identifies currency used for settlement, if different from trading currency
	CHAR matchAlgorithm;	// Matching algorithm 
	uInt32 minTradeVol;	// The minimum trading volume for a security
	uInt32 maxTradeVol;	// The maximum trading volume for a security
	PRICE minPriceIncrement;	// Minimum constant tick for the instrument, sent only if instrument is non-VTT (Variable Tick table) eligible
	FLOAT displayFactor;	// Contains the multiplier to convert the CME Globex display price to the conventional price
	sbe::optional<std::uint8_t,255U> mainFraction;	// Price Denominator of Main Fraction
	sbe::optional<std::uint8_t,255U> subFraction;	// Price Denominator of Sub Fraction
	sbe::optional<std::uint8_t,255U> priceDisplayFormat;	// Number of decimals in fractional display price
	UnitOfMeasure unitOfMeasure;	// Unit of measure for the products' original contract size. This will be populated for all products listed on CME Globex
	PRICENULL unitOfMeasureQty;	// This field contains the contract size for each instrument. Used in combination with tag 996-UnitofMeasure
	PRICENULL tradingReferencePrice;	// Reference price for prelisted instruments or the last calculated Settlement whether it be Theoretical, Preliminary or a Final Settle of the session.
	SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
	sbe::optional<std::int32_t,2147483647> openInterestQty;	// The total open interest for the market at the close of the prior trading session.
	sbe::optional<std::int32_t,2147483647> clearedVolume;	// The total cleared volume of instrument traded during the prior trading session.
	PRICENULL highLimitPrice;	// Allowable high limit price for the trading day
	PRICENULL lowLimitPrice;	// Allowable low limit price for the trading day
	PRICENULL maxPriceVariation;	// Differential value for price banding.
	sbe::optional<std::int32_t,2147483647> decayQuantity;	// Indicates the quantity that a contract will decay daily by once the decay start date is reached
	sbe::optional<std::uint16_t,65535U> decayStartDate;	// Indicates the date at which a decaying contract will begin to decay
	sbe::optional<std::int32_t,2147483647> originalContractSize;	// Fixed contract value assigned to each product
	sbe::optional<std::int32_t,2147483647> contractMultiplier;	// Number of deliverable units per instrument, e.g., peak days in maturity month or number of calendar days in maturity month
	sbe::optional<std::int8_t,127> contractMultiplierUnit;	// Indicates the type of multiplier being applied to the product. Optionally used in combination with tag 231-ContractMultiplier
	sbe::optional<std::int8_t,127> flowScheduleType;	// The schedule according to which the electricity is delivered in a physical contract, or priced in a financial contract. Specifies whether the contract is defined according to the Easter Peak, Eastern Off-Peak, Western Peak or Western Off-Peak.
	PRICENULL minPriceIncrementAmount;	// Monetary value equivalent to the minimum price fluctuation
	UserDefinedInstrument userDefinedInstrument;	// User-defined instruments flag
	sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates session date corresponding to the settlement price in tag 1150-TradingReferencePrice
	// Number of repeating EventType entries
	struct NoEvents {
		EventType eventType;	// Code to represent the type of event
		uInt64 eventTime;	// Date and Time of instument Activation or Expiration event sent as number of nanoseconds since Unix epoch
	};
	sbe::group<NoEvents,groupSize> noEvents;
	// Number of repeating FeedType entries
	struct NoMDFeedTypes {
		MDFeedType mDFeedType;	// Describes a class of service for a given data feed. GBX- Real Book, GBI-Implied Book
		Int8 marketDepth;	// Book depth
	};
	sbe::group<NoMDFeedTypes,groupSize> noMDFeedTypes;
	// Number of repeating InstrAttribType entries
	struct NoInstAttrib {
		static constexpr std::int8_t instAttribType=24;	// Instrument eligibility attributes
		InstAttribValue instAttribValue;	// Bitmap field of 32 Boolean type instrument eligibility flags
	};
	sbe::group<NoInstAttrib,groupSize> noInstAttrib;
	// Number of entries
	struct NoLotTypeRules {
		Int8 lotType;	// This tag is required to interpret the value in tag 1231-MinLotSize
		DecimalQty minLotSize;	// Minimum quantity accepted for order entry. If tag 1093-LotType=4, this value is the minimum quantity for order entry expressed in the applicable units, specified in tag 996-UnitOfMeasure, e.g. megawatts
	};
	sbe::group<NoLotTypeRules,groupSize> noLotTypeRules;
};

struct MDInstrumentDefinitionSpread29 {
	std::uint16_t msg_size;
	messageHeader message_header;
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<std::uint32_t,4294967295U> totNumReports;	// Total number of instruments in the Replay loop. Used on Replay Feed only
	SecurityUpdateAction securityUpdateAction;	// Last Security update action on Incremental feed, 'D' or 'M' is used when a mid-week deletion or modification (i.e. extension) occurs
	uInt64 lastUpdateTime;	// Timestamp of when the instrument was last added, modified or deleted
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current state of the instrument. The data is available in the Instrument Replay feed only
	Int16 applID;	// The channel ID as defined in the XML Configuration file
	uInt8 marketSegmentID;	// Identifies the market segment, populated for all CME Globex instruments
	sbe::optional<std::uint8_t,255U> underlyingProduct;	// Product complex
	SecurityExchange securityExchange;	// Exchange used to identify a security
	SecurityGroup securityGroup;	// Security Group Code
	Asset asset;	// The underlying asset code also known as Product Code
	Symbol symbol;	// Instrument Name or Symbol. Previously used as  Group Code 
	Int32 securityID;	// Unique instrument ID
	static constexpr char securityIDSource='8';	// Identifies class or source of the security ID (Tag 48) value
	SecurityType securityType;	// Security Type
	CFICode cFICode;	// ISO standard instrument categorization code
	MaturityMonthYear maturityMonthYear;	// This field provides the actual calendar date for contract maturity
	Currency currency;	// Identifies currency used for price
	SecuritySubType securitySubType;	// Strategy type
	UserDefinedInstrument userDefinedInstrument;	// User-defined instruments flag
	CHAR matchAlgorithm;	// Matching algorithm
	uInt32 minTradeVol;	// The minimum trading volume for a security
	uInt32 maxTradeVol;	// The maximum trading volume for a security
	PRICE minPriceIncrement;	// Minimum constant tick for the instrument, sent only if instrument is non-VTT (Variable Tick table) eligible
	FLOAT displayFactor;	// Contains the multiplier to convert the CME Globex display price to the conventional price
	sbe::optional<std::uint8_t,255U> priceDisplayFormat;	// Number of decimals in fractional display price
	PRICENULL priceRatio;	// Used for price calculation in spread and leg pricing
	sbe::optional<std::int8_t,127> tickRule;	// Tick Rule 
	UnitOfMeasure unitOfMeasure;	// Unit of measure for the products' original contract size
	PRICENULL tradingReferencePrice;	// Reference price - the most recently available Settlement whether it be Theoretical, Preliminary or a Final Settle of the session
	SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
	sbe::optional<std::int32_t,2147483647> openInterestQty;	// The total open interest for the market at the close of the prior trading session
	sbe::optional<std::int32_t,2147483647> clearedVolume;	// The total cleared volume of instrument traded during the prior trading session
	PRICENULL highLimitPrice;	// Allowable high limit price for the trading day
	PRICENULL lowLimitPrice;	// Allowable low limit price for the trading day
	PRICENULL maxPriceVariation;	// Differential value for price banding
	sbe::optional<std::uint8_t,255U> mainFraction;	// Price Denominator of Main Fraction
	sbe::optional<std::uint8_t,255U> subFraction;	// Price Denominator of Sub Fraction
	sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates session date corresponding to the settlement price in tag 1150-TradingReferencePrice
	// Number of repeating EventType entries
	struct NoEvents {
		EventType eventType;	// Code to represent the type of event
		uInt64 eventTime;	// Date and time of instument Activation or Expiration event sent as number of nanoseconds since Unix epoch
	};
	sbe::group<NoEvents,groupSize> noEvents;
	// Number of FeedType entries
	struct NoMDFeedTypes {
		MDFeedType mDFeedType;	// Describes a class of service for a given data feed. GBX- Real Book, GBI-Implied Book
		Int8 marketDepth;	// Identifies the depth of book
	};
	sbe::group<NoMDFeedTypes,groupSize> noMDFeedTypes;
	// Number of InstrAttribType entries
	struct NoInstAttrib {
		static constexpr std::int8_t instAttribType=24;	// Instrument Eligibility Attributes
		InstAttribValue instAttribValue;	// Bitmap field of 32 Boolean type Instrument eligibility flags
	};
	sbe::group<NoInstAttrib,groupSize> noInstAttrib;
	// Number of entries
	struct NoLotTypeRules {
		Int8 lotType;	// This tag is required to interpret the value in tag 1231-MinLotSize
		DecimalQty minLotSize;	// Minimum quantity accepted for order entry. If tag 1093-LotType=4, this value is the minimum quantity for order entry expressed in the applicable units, specified in tag 996-UnitOfMeasure, e.g. megawatts
	};
	sbe::group<NoLotTypeRules,groupSize> noLotTypeRules;
	// Number of Leg entries
	struct NoLegs {
		Int32 legSecurityID;	// Leg Security ID
		static constexpr char legSecurityIDSource='8';	// Identifies source of tag 602-LegSecurityID value
		LegSide legSide;	// Leg side
		Int8 legRatioQty;	// Leg ratio of quantity for this individual leg relative to the entire multi-leg instrument
		PRICENULL legPrice;	// Price for the future leg of a UDS Covered instrument 
		DecimalQty legOptionDelta;	// Delta used to calculate the quantity of futures used to cover the option or option strategy
	};
	sbe::group<NoLegs,groupSize> noLegs;
};

struct SecurityStatus30 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch.
	SecurityGroup securityGroup;	// Security Group
	Asset asset;	// Product Code within Security Group specified
	sbe::optional<std::int32_t,2147483647> securityID;	// If this tag is present, 35=f message is sent for the instrument
	sbe::optional<std::uint16_t,65535U> tradeDate;	// Trade Session Date
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> securityTradingStatus;	// Identifies the trading status applicable to the instrument or Security Group
	HaltReason haltReason;	// Identifies the reason for the status change
	SecurityTradingEvent securityTradingEvent;	// Identifies an additional event or a rule related to the status
};

struct MDIncrementalRefreshBook32 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL mDEntryPx;	// Market Data entry price
		sbe::optional<std::int32_t,2147483647> mDEntrySize;	// Market Data entry size
		Int32 securityID;	// Security ID
		uInt32 rptSeq;	// Market Data entry sequence number per instrument update
		sbe::optional<std::int32_t,2147483647> numberOfOrders;	// In Book entry - aggregate number of orders at given price level
		uInt8 mDPriceLevel;	// Aggregate book level
		MDUpdateAction mDUpdateAction;	//  Market Data update action
		MDEntryTypeBook mDEntryType;	// Market Data entry type
		tc::padding<5> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
	// Number of OrderID entries
	struct NoOrderIDEntries {
		uInt64 orderID;	// Unique Order ID
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDOrderPriority;	// Order priority for execution on the order book
		sbe::optional<std::int32_t,2147483647> mDDisplayQty;	// Visible qty of order
		sbe::optional<std::uint8_t,255U> referenceID;	// Reference to corresponding Price and Security ID, sequence of MD entry in the message
		OrderUpdateAction orderUpdateAction;	// Order book update action to be applied to the order referenced by OrderID
		tc::padding<2> padding;
	};
	sbe::group<NoOrderIDEntries,groupSize8Byte> noOrderIDEntries;
};

struct MDIncrementalRefreshDailyStatistics33 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL mDEntryPx;	// Market Data entry price
		sbe::optional<std::int32_t,2147483647> mDEntrySize;	// Market Data entry size
		Int32 securityID;	// Security ID 
		uInt32 rptSeq;	// Market Data entry sequence number per instrument update
		sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates trade session date corresponding to a statistic entry
		SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
		MDUpdateAction mDUpdateAction;	// Market Data update action
		MDEntryTypeDailyStatistics mDEntryType;	// Market Data entry type
		tc::padding<7> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDIncrementalRefreshLimitsBanding34 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL highLimitPrice;	// Upper price threshold for the instrument
		PRICENULL lowLimitPrice;	// Lower price threshold for the instrument
		PRICENULL maxPriceVariation;	// Differential static value for price banding
		Int32 securityID;	// Security ID 
		uInt32 rptSeq;	// MD Entry sequence number per instrument update
		static constexpr std::int8_t mDUpdateAction=0;	// Market Data entry update action. In order to delete banding value, high or low limit, the deleted price field is populated with a NULL 
		static constexpr char mDEntryType='g';	// Market Data entry type   
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDIncrementalRefreshSessionStatistics35 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICE mDEntryPx;	// Market Data entry price
		Int32 securityID;	// Security ID 
		uInt32 rptSeq;	// MD Entry sequence number per instrument update
		sbe::optional<OpenCloseSettlFlag,OpenCloseSettlFlag::NotPresent> openCloseSettlFlag;	// Flag describing IOP and Open Price entries
		MDUpdateAction mDUpdateAction;	// Market Data update action 
		MDEntryTypeStatistics mDEntryType;	// Market Data entry type   
		sbe::optional<std::int32_t,2147483647> mDEntrySize;	// Indicative Opening Quantity 
		tc::padding<1> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDIncrementalRefreshVolume37 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		Int32 mDEntrySize;	// Cumulative traded volume
		Int32 securityID;	// Security ID
		uInt32 rptSeq;	// Market Data entry sequence number per instrument update
		MDUpdateAction mDUpdateAction;	// Market Data update action
		static constexpr char mDEntryType='e';	// Electronic Volume entry provides cumulative session trade volume updated with the event
		tc::padding<3> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct SnapshotFullRefresh38 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt32 lastMsgSeqNumProcessed;	// Sequence number of the last Incremental feed packet processed. This value is used to synchronize the snapshot loop with the real-time feed
	uInt32 totNumReports;	// Total number of messages replayed in the loop
	Int32 securityID;	// Security ID
	uInt32 rptSeq;	// Sequence number of the last Market Data entry processed for the instrument
	uInt64 transactTime;	// Timestamp of the last event security participated in, sent as number of nanoseconds since Unix epoch
	uInt64 lastUpdateTime;	// UTC Date and time of last Security Definition add, update or delete on a given Market Data channel
	sbe::optional<std::uint16_t,65535U> tradeDate;	// Trade session date sent as number of days since Unix epoch
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current trading state of the instrument
	PRICENULL highLimitPrice;	// Upper price threshold for the instrument
	PRICENULL lowLimitPrice;	// Lower price threshold for the instrument
	PRICENULL maxPriceVariation;	// Differential value for price banding
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL mDEntryPx;	// Market Data entry price
		sbe::optional<std::int32_t,2147483647> mDEntrySize;	// Market Data entry quantity
		sbe::optional<std::int32_t,2147483647> numberOfOrders;	// Aggregate number of orders at the given price level
		sbe::optional<std::int8_t,127> mDPriceLevel;	// Aggregate book position
		sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates the date of trade session corresponding to a statistic entry
		sbe::optional<OpenCloseSettlFlag,OpenCloseSettlFlag::NotPresent> openCloseSettlFlag;	// Flag describing  Open Price entry
		SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
		MDEntryType mDEntryType;	// Market Data entry type
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct QuoteRequest39 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	QuoteReqId quoteReqID;	// Quote Request ID defined by the exchange
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<3> block_padding;
	// Indicates the number of repeating symbols specified
	struct NoRelatedSym {
		Symbol symbol;	// Instrument Name or Symbol
		Int32 securityID;	// Security ID
		sbe::optional<std::int32_t,2147483647> orderQty;	// Quantity requested
		Int8 quoteType;	// Type of quote requested
		sbe::optional<std::int8_t,127> side;	// Side requested
		tc::padding<2> padding;
	};
	sbe::group<NoRelatedSym,groupSize> noRelatedSym;
};

struct MDInstrumentDefinitionOption41 {
	std::uint16_t msg_size;
	messageHeader message_header;
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<std::uint32_t,4294967295U> totNumReports;	// Total number of instruments in the Replay loop. Used on Replay Feed only 
	SecurityUpdateAction securityUpdateAction;	// Last Security update action on Incremental feed, 'D' or 'M' is used when a mid-week deletion or modification (i.e. extension) occurs
	uInt64 lastUpdateTime;	// Timestamp of when the instrument was last added, modified or deleted
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current state of the instrument. The data is available in the Instrument Replay feed only 
	Int16 applID;	// The channel ID as defined in the XML Configuration file
	uInt8 marketSegmentID;	// Identifies the market segment, populated for all CME Globex instruments
	uInt8 underlyingProduct;	// Indicates the product complex
	SecurityExchange securityExchange;	// Exchange used to identify a security
	SecurityGroup securityGroup;	// Security Group Code 
	Asset asset;	// The underlying asset code also known as Product Code
	Symbol symbol;	// Instrument Name or Symbol. Previously used as Instrument Group Code 
	Int32 securityID;	// Unique Instrument ID
	static constexpr char securityIDSource='8';	// Identifies class or source of tag 48-SecurityID value
	SecurityType securityType;	// Security Type
	CFICode cFICode;	// ISO standard instrument categorization code
	PutOrCall putOrCall;	// Indicates whether an option instrument is a put or call
	MaturityMonthYear maturityMonthYear;	// This field provides the actual calendar date for contract maturity
	Currency currency;	// Identifies currency used for price
	PRICENULL strikePrice;	// Strike Price for an option instrument
	Currency strikeCurrency;	// Currency in which the StrikePrice is denominated
	Currency settlCurrency;	// Identifies currency used for settlement, if different from trade price currency
	PRICENULL minCabPrice;	// Defines cabinet price for outright options products
	CHAR matchAlgorithm;	// Matching algorithm
	uInt32 minTradeVol;	// The minimum trading volume for a security.
	uInt32 maxTradeVol;	// The maximum trading volume for a security.
	PRICENULL minPriceIncrement;	// Minimum constant tick for the instrument
	PRICENULL minPriceIncrementAmount;	// Monetary value equivalent to the minimum price fluctuation
	FLOAT displayFactor;	// Contains the multiplier to convert the CME Globex display price to the conventional price
	sbe::optional<std::int8_t,127> tickRule;	// VTT code referencing variable tick table 
	sbe::optional<std::uint8_t,255U> mainFraction;	// Price Denominator of Main Fraction
	sbe::optional<std::uint8_t,255U> subFraction;	// Price Denominator of Sub Fraction
	sbe::optional<std::uint8_t,255U> priceDisplayFormat;	// Number of decimals in fractional display price
	UnitOfMeasure unitOfMeasure;	// Unit of measure for the products' original contract size. This will be populated for all products listed on CME Globex
	PRICENULL unitOfMeasureQty;	// This field contains the contract size for each instrument. Used in combination with tag 996-UnitofMeasure
	PRICENULL tradingReferencePrice;	// Reference price - the most recently available Settlement whether it be Theoretical, Preliminary or a Final Settle of the session
	SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
	sbe::optional<std::int32_t,2147483647> clearedVolume;	// The total cleared volume of instrument traded during the prior trading session
	sbe::optional<std::int32_t,2147483647> openInterestQty;	// The total open interest for the market at the close of the prior trading session.
	PRICENULL lowLimitPrice;	// Allowable low limit price for the trading day 
	PRICENULL highLimitPrice;	// Allowable high limit price for the trading day
	UserDefinedInstrument userDefinedInstrument;	// User-defined instruments flag
	sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates session date corresponding to the settlement price in tag 1150-TradingReferencePrice
	// Number of EventType entries
	struct NoEvents {
		EventType eventType;	// Code to represent the type of event
		uInt64 eventTime;	// Date and Time of instument Activation or Expiration event sent as number of nanoseconds since Unix epoch
	};
	sbe::group<NoEvents,groupSize> noEvents;
	// Number of FeedType entries
	struct NoMDFeedTypes {
		MDFeedType mDFeedType;	// Describes a class of service for a given data feed. GBX- Real Book, GBI-Implied Book
		Int8 marketDepth;	// Book depth
	};
	sbe::group<NoMDFeedTypes,groupSize> noMDFeedTypes;
	// Number of InstrAttribType entries
	struct NoInstAttrib {
		static constexpr std::int8_t instAttribType=24;	// Instrument Eligibility Attributes
		InstAttribValue instAttribValue;	// Bitmap field of 32 Boolean type Instrument eligibility flags
	};
	sbe::group<NoInstAttrib,groupSize> noInstAttrib;
	// Number of entries
	struct NoLotTypeRules {
		Int8 lotType;	// This tag is required to interpret the value in tag 1231-MinLotSize
		DecimalQty minLotSize;	// Minimum quantity accepted for order entry. If tag 1093-LotType=4, this value is the minimum quantity for order entry expressed in the applicable units, specified in tag 996-UnitOfMeasure, e.g. megawatts
	};
	sbe::group<NoLotTypeRules,groupSize> noLotTypeRules;
	// Number of underlying instruments
	struct NoUnderlyings {
		Int32 underlyingSecurityID;	// Unique Instrument ID as qualified by the exchange per tag 305-UnderlyingSecurityIDSource
		static constexpr char underlyingSecurityIDSource='8';	// This value is always '8' for CME
		UnderlyingSymbol underlyingSymbol;	// Underlying Instrument Symbol (Contract Name)
	};
	sbe::group<NoUnderlyings,groupSize> noUnderlyings;
	// Number of related instruments group
	struct NoRelatedInstruments {
		Int32 relatedSecurityID;	// Related Security ID
		static constexpr char relatedSecurityIDSource='8';	// Related Security ID source
		Symbol relatedSymbol;	// Related instrument Symbol
	};
	sbe::group<NoRelatedInstruments,groupSize> noRelatedInstruments;
};

struct MDIncrementalRefreshTradeSummary42 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of Trade Summary entries
	struct NoMDEntries {
		PRICE mDEntryPx;	// Trade price
		Int32 mDEntrySize;	// Consolidated trade quantity
		Int32 securityID;	// Security ID as defined by CME
		uInt32 rptSeq;	// Sequence number per instrument update
		sbe::optional<std::int32_t,2147483647> numberOfOrders;	// The total number of real orders per instrument that participated in a match step within a match event
		sbe::optional<AggressorSide,AggressorSide::NotPresent> aggressorSide;	// Indicates which side is the aggressor or if there is no aggressor
		MDUpdateAction mDUpdateAction;	// Market Data update action
		static constexpr char mDEntryType='2';	// Market Data entry type
		sbe::optional<std::uint32_t,4294967295U> mDTradeEntryID;	// Market Data Trade entry ID
		tc::padding<2> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
	// Number of OrderID entries
	struct NoOrderIDEntries {
		uInt64 orderID;	// Unique order identifier as assigned by the exchange
		Int32 lastQty;	// Quantity bought or sold on this last fill
		tc::padding<4> padding;
	};
	sbe::group<NoOrderIDEntries,groupSize8Byte> noOrderIDEntries;
};

struct MDIncrementalRefreshOrderBook43 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		sbe::optional<std::uint64_t,18446744073709551615ULL> orderID;	// Order ID
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDOrderPriority;	// Order priority for execution on the order book
		PRICENULL mDEntryPx;	// Order price
		sbe::optional<std::int32_t,2147483647> mDDisplayQty;	// Visible order qty
		Int32 securityID;	// Security ID 
		MDUpdateAction mDUpdateAction;	// Order book update action to be applied to the order referenced by OrderID
		MDEntryTypeBook mDEntryType;	// Market Data entry type
		tc::padding<6> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct SnapshotFullRefreshOrderBook44 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt32 lastMsgSeqNumProcessed;	// Sequence number of the last Incremental feed packet processed. This value is used to synchronize the snapshot loop with the real-time feed
	uInt32 totNumReports;	// Total number of instruments in the replayed loop
	Int32 securityID;	// Security ID
	uInt32 noChunks;	// Total number of packets that constitutes a single instrument order book
	uInt32 currentChunk;	// Chunk sequence
	uInt64 transactTime;	// Timestamp of the last event security participated in, sent as number of nanoseconds since Unix epoch
	// Number of entries in Market Data message
	struct NoMDEntries {
		uInt64 orderID;	// Unique Order ID
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDOrderPriority;	// Order priority for execution on the order book
		PRICE mDEntryPx;	// Order Price
		Int32 mDDisplayQty;	// Visible order qty
		MDEntryTypeBook mDEntryType;	// Market Data entry type
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDIncrementalRefreshBook46 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL9 mDEntryPx;	// Market Data entry price
		sbe::optional<std::int32_t,2147483647> mDEntrySize;	// Market Data entry size
		Int32 securityID;	// Security ID
		uInt32 rptSeq;	// Market Data entry sequence number per instrument update
		sbe::optional<std::int32_t,2147483647> numberOfOrders;	// In Book entry - aggregate number of orders at given price level
		uInt8 mDPriceLevel;	// Aggregate book level
		MDUpdateAction mDUpdateAction;	//  Market Data update action
		MDEntryTypeBook mDEntryType;	// Market Data entry type
		tc::padding<5> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
	// Number of OrderID entries
	struct NoOrderIDEntries {
		uInt64 orderID;	// Unique Order ID
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDOrderPriority;	// Order priority for execution on the order book
		sbe::optional<std::int32_t,2147483647> mDDisplayQty;	// Visible qty of order
		sbe::optional<std::uint8_t,255U> referenceID;	// Reference to corresponding Price and Security ID, sequence of MD entry in the message
		OrderUpdateAction orderUpdateAction;	// Order book update action to be applied to the order referenced by OrderID
		tc::padding<2> padding;
	};
	sbe::group<NoOrderIDEntries,groupSize8Byte> noOrderIDEntries;
};

struct MDIncrementalRefreshOrderBook47 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		sbe::optional<std::uint64_t,18446744073709551615ULL> orderID;	// Order ID
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDOrderPriority;	// Order priority for execution on the order book
		PRICENULL9 mDEntryPx;	// Order price
		sbe::optional<std::int32_t,2147483647> mDDisplayQty;	// Visible order qty
		Int32 securityID;	// Security ID 
		MDUpdateAction mDUpdateAction;	// Order book update action to be applied to the order referenced by OrderID
		MDEntryTypeBook mDEntryType;	// Market Data entry type 
		tc::padding<6> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDIncrementalRefreshTradeSummary48 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of Trade Summary entries
	struct NoMDEntries {
		PRICE9 mDEntryPx;	// Trade price
		Int32 mDEntrySize;	// Consolidated trade quantity
		Int32 securityID;	// Security ID as defined by CME
		uInt32 rptSeq;	// Sequence number per instrument update
		Int32 numberOfOrders;	// The total number of real orders per instrument that participated in a match step within a match event
		sbe::optional<AggressorSide,AggressorSide::NotPresent> aggressorSide;	// Indicates which side is the aggressor or if there is no aggressor
		MDUpdateAction mDUpdateAction;	// Market Data update action
		static constexpr char mDEntryType='2';	// Market Data entry type
		sbe::optional<std::uint32_t,4294967295U> mDTradeEntryID;	// Market Data Trade entry ID
		tc::padding<2> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
	// Number of OrderID entries
	struct NoOrderIDEntries {
		uInt64 orderID;	// Unique order identifier as assigned by the exchange
		Int32 lastQty;	// Quantity bought or sold on this last fill
		tc::padding<4> padding;
	};
	sbe::group<NoOrderIDEntries,groupSize8Byte> noOrderIDEntries;
};

struct MDIncrementalRefreshDailyStatistics49 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL9 mDEntryPx;	// Market Data entry price
		sbe::optional<std::int32_t,2147483647> mDEntrySize;	// Market Data entry size
		Int32 securityID;	// Security ID 
		uInt32 rptSeq;	// Market Data entry sequence number per instrument update
		sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates trade session date corresponding to a statistic entry
		SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
		MDUpdateAction mDUpdateAction;	// Market Data update action
		MDEntryTypeDailyStatistics mDEntryType;	// Market Data entry type
		tc::padding<7> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDIncrementalRefreshLimitsBanding50 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL9 highLimitPrice;	// Upper price threshold for the instrument
		PRICENULL9 lowLimitPrice;	// Lower price threshold for the instrument
		PRICENULL9 maxPriceVariation;	// Differential static value for price banding
		Int32 securityID;	// Security ID 
		uInt32 rptSeq;	// MD Entry sequence number per instrument update
		static constexpr std::int8_t mDUpdateAction=0;	// Market Data entry update action. In order to delete banding value, high or low limit, the deleted price field is populated with a NULL 
		static constexpr char mDEntryType='g';	// Market Data entry type   
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDIncrementalRefreshSessionStatistics51 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt64 transactTime;	// Start of event processing time in number of nanoseconds since Unix epoch
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	tc::padding<2> block_padding;
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICE9 mDEntryPx;	// Market Data entry price
		Int32 securityID;	// Security ID 
		uInt32 rptSeq;	// MD Entry sequence number per instrument update
		sbe::optional<OpenCloseSettlFlag,OpenCloseSettlFlag::NotPresent> openCloseSettlFlag;	// Flag describing IOP and Open Price entries
		MDUpdateAction mDUpdateAction;	// Market Data update action 
		MDEntryTypeStatistics mDEntryType;	// Market Data entry type   
		sbe::optional<std::int32_t,2147483647> mDEntrySize;	// Indicative Opening Quantity 
		tc::padding<1> padding;
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct SnapshotFullRefresh52 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt32 lastMsgSeqNumProcessed;	// Sequence number of the last Incremental feed packet processed. This value is used to synchronize the snapshot loop with the real-time feed
	uInt32 totNumReports;	// Total number of messages replayed in the loop
	Int32 securityID;	// Security ID
	uInt32 rptSeq;	// Sequence number of the last Market Data entry processed for the instrument
	uInt64 transactTime;	// Timestamp of the last event security participated in, sent as number of nanoseconds since Unix epoch
	uInt64 lastUpdateTime;	// UTC Date and time of last Security Definition add, update or delete on a given Market Data channel
	sbe::optional<std::uint16_t,65535U> tradeDate;	// Trade session date sent as number of days since Unix epoch
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current trading state of the instrument
	PRICENULL9 highLimitPrice;	// Upper price threshold for the instrument
	PRICENULL9 lowLimitPrice;	// Lower price threshold for the instrument
	PRICENULL9 maxPriceVariation;	// Differential value for price banding
	// Number of entries in Market Data message
	struct NoMDEntries {
		PRICENULL9 mDEntryPx;	// Market Data entry price
		sbe::optional<std::int32_t,2147483647> mDEntrySize;	// Market Data entry quantity
		sbe::optional<std::int32_t,2147483647> numberOfOrders;	// Aggregate number of orders at the given price level
		sbe::optional<std::int8_t,127> mDPriceLevel;	// Aggregate book position
		sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates the date of trade session corresponding to a statistic entry
		sbe::optional<OpenCloseSettlFlag,OpenCloseSettlFlag::NotPresent> openCloseSettlFlag;	// Flag describing  Open Price entry
		SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
		MDEntryType mDEntryType;	// Market Data entry type
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct SnapshotFullRefreshOrderBook53 {
	std::uint16_t msg_size;
	messageHeader message_header;
	uInt32 lastMsgSeqNumProcessed;	// Sequence number of the last Incremental feed packet processed. This value is used to synchronize the snapshot loop with the real-time feed
	uInt32 totNumReports;	// Total number of instruments in the replayed loop
	Int32 securityID;	// Security ID
	uInt32 noChunks;	// Total number of packets that constitutes a single instrument order book
	uInt32 currentChunk;	// Chunk sequence
	uInt64 transactTime;	// Timestamp of the last event security participated in, sent as number of nanoseconds since Unix epoch
	// Number of entries in Market Data message
	struct NoMDEntries {
		uInt64 orderID;	// Unique Order ID
		sbe::optional<std::uint64_t,18446744073709551615ULL> mDOrderPriority;	// Order priority for execution on the order book
		PRICE9 mDEntryPx;	// Order Price
		Int32 mDDisplayQty;	// Visible order qty
		MDEntryTypeBook mDEntryType;	// Market Data entry type
	};
	sbe::group<NoMDEntries,groupSize> noMDEntries;
};

struct MDInstrumentDefinitionFuture54 {
	std::uint16_t msg_size;
	messageHeader message_header;
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<std::uint32_t,4294967295U> totNumReports;	// Total number of instruments in the Replay loop. Used on Replay Feed only 
	SecurityUpdateAction securityUpdateAction;	// Last Security update action on Incremental feed, 'D' or 'M' is used when a mid-week deletion or modification (i.e. extension) occurs
	uInt64 lastUpdateTime;	// Timestamp of when the instrument was last added, modified or deleted
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current state of the instrument. In Security Definition message this tag is available in the Instrument Replay feed only 
	Int16 applID;	// The channel ID as defined in the XML Configuration file
	uInt8 marketSegmentID;	// Identifies the market segment, populated for all CME Globex instruments
	uInt8 underlyingProduct;	// Product complex
	SecurityExchange securityExchange;	// Exchange used to identify a security
	SecurityGroup securityGroup;	// Security Group Code.
	Asset asset;	// The underlying asset code also known as Product Code
	Symbol symbol;	// Instrument Name or Symbol 
	Int32 securityID;	// Unique instrument ID
	static constexpr char securityIDSource='8';	// Identifies class or source of tag 48-SecurityID value
	SecurityType securityType;	// Security Type
	CFICode cFICode;	// ISO standard instrument categorization code
	MaturityMonthYear maturityMonthYear;	// This field provides the actual calendar date for contract maturity
	Currency currency;	// Identifies currency used for price
	Currency settlCurrency;	// Identifies currency used for settlement, if different from trading currency
	CHAR matchAlgorithm;	// Matching algorithm 
	uInt32 minTradeVol;	// The minimum trading volume for a security
	uInt32 maxTradeVol;	// The maximum trading volume for a security
	PRICE9 minPriceIncrement;	// Minimum constant tick for the instrument, sent only if instrument is non-VTT (Variable Tick table) eligible
	Decimal9 displayFactor;	// Contains the multiplier to convert the CME Globex display price to the conventional price
	sbe::optional<std::uint8_t,255U> mainFraction;	// Price Denominator of Main Fraction
	sbe::optional<std::uint8_t,255U> subFraction;	// Price Denominator of Sub Fraction
	sbe::optional<std::uint8_t,255U> priceDisplayFormat;	// Number of decimals in fractional display price
	UnitOfMeasure unitOfMeasure;	// Unit of measure for the products' original contract size. This will be populated for all products listed on CME Globex
	Decimal9NULL unitOfMeasureQty;	// This field contains the contract size for each instrument. Used in combination with tag 996-UnitofMeasure
	PRICENULL9 tradingReferencePrice;	// Reference price for prelisted instruments or the last calculated Settlement whether it be Theoretical, Preliminary or a Final Settle of the session.
	SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
	sbe::optional<std::int32_t,2147483647> openInterestQty;	// The total open interest for the market at the close of the prior trading session.
	sbe::optional<std::int32_t,2147483647> clearedVolume;	// The total cleared volume of instrument traded during the prior trading session.
	PRICENULL9 highLimitPrice;	// Allowable high limit price for the trading day
	PRICENULL9 lowLimitPrice;	// Allowable low limit price for the trading day
	PRICENULL9 maxPriceVariation;	// Differential value for price banding.
	sbe::optional<std::int32_t,2147483647> decayQuantity;	// Indicates the quantity that a contract will decay daily by once the decay start date is reached
	sbe::optional<std::uint16_t,65535U> decayStartDate;	// Indicates the date at which a decaying contract will begin to decay
	sbe::optional<std::int32_t,2147483647> originalContractSize;	// Fixed contract value assigned to each product
	sbe::optional<std::int32_t,2147483647> contractMultiplier;	// Number of deliverable units per instrument, e.g., peak days in maturity month or number of calendar days in maturity month
	sbe::optional<std::int8_t,127> contractMultiplierUnit;	// Indicates the type of multiplier being applied to the product. Optionally used in combination with tag 231-ContractMultiplier
	sbe::optional<std::int8_t,127> flowScheduleType;	// The schedule according to which the electricity is delivered in a physical contract, or priced in a financial contract. Specifies whether the contract is defined according to the Easter Peak, Eastern Off-Peak, Western Peak or Western Off-Peak.
	PRICENULL9 minPriceIncrementAmount;	// Monetary value equivalent to the minimum price fluctuation
	UserDefinedInstrument userDefinedInstrument;	// User-defined instruments flag
	sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates session date corresponding to the settlement price in tag 1150-TradingReferencePrice
	// Number of repeating EventType entries
	struct NoEvents {
		EventType eventType;	// Code to represent the type of event
		uInt64 eventTime;	// Date and Time of instument Activation or Expiration event sent as number of nanoseconds since Unix epoch
	};
	sbe::group<NoEvents,groupSize> noEvents;
	// Number of repeating FeedType entries
	struct NoMDFeedTypes {
		MDFeedType mDFeedType;	// Describes a class of service for a given data feed. GBX- Real Book, GBI-Implied Book
		Int8 marketDepth;	// Book depth
	};
	sbe::group<NoMDFeedTypes,groupSize> noMDFeedTypes;
	// Number of repeating InstrAttribType entries
	struct NoInstAttrib {
		static constexpr std::int8_t instAttribType=24;	// Instrument eligibility attributes
		InstAttribValue instAttribValue;	// Bitmap field of 32 Boolean type instrument eligibility flags
	};
	sbe::group<NoInstAttrib,groupSize> noInstAttrib;
	// Number of entries
	struct NoLotTypeRules {
		Int8 lotType;	// This tag is required to interpret the value in tag 1231-MinLotSize
		DecimalQty minLotSize;	// Minimum quantity accepted for order entry. If tag 1093-LotType=4, this value is the minimum quantity for order entry expressed in the applicable units, specified in tag 996-UnitOfMeasure, e.g. megawatts
	};
	sbe::group<NoLotTypeRules,groupSize> noLotTypeRules;
};

struct MDInstrumentDefinitionOption55 {
	std::uint16_t msg_size;
	messageHeader message_header;
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<std::uint32_t,4294967295U> totNumReports;	// Total number of instruments in the Replay loop. Used on Replay Feed only 
	SecurityUpdateAction securityUpdateAction;	// Last Security update action on Incremental feed, 'D' or 'M' is used when a mid-week deletion or modification (i.e. extension) occurs
	uInt64 lastUpdateTime;	// Timestamp of when the instrument was last added, modified or deleted
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current state of the instrument. The data is available in the Instrument Replay feed only 
	Int16 applID;	// The channel ID as defined in the XML Configuration file
	uInt8 marketSegmentID;	// Identifies the market segment, populated for all CME Globex instruments
	uInt8 underlyingProduct;	// Indicates the product complex
	SecurityExchange securityExchange;	// Exchange used to identify a security
	SecurityGroup securityGroup;	// Security Group Code 
	Asset asset;	// The underlying asset code also known as Product Code
	Symbol symbol;	// Instrument Name or Symbol. Previously used as Instrument Group Code 
	Int32 securityID;	// Unique Instrument ID
	static constexpr char securityIDSource='8';	// Identifies class or source of tag 48-SecurityID value
	SecurityType securityType;	// Security Type
	CFICode cFICode;	// ISO standard instrument categorization code
	PutOrCall putOrCall;	// Indicates whether an option instrument is a put or call
	MaturityMonthYear maturityMonthYear;	// This field provides the actual calendar date for contract maturity
	Currency currency;	// Identifies currency used for price
	PRICENULL9 strikePrice;	// Strike Price for an option instrument
	Currency strikeCurrency;	// Currency in which the StrikePrice is denominated
	Currency settlCurrency;	// Identifies currency used for settlement, if different from trade price currency
	PRICENULL9 minCabPrice;	// Defines cabinet price for outright options products
	CHAR matchAlgorithm;	// Matching algorithm
	uInt32 minTradeVol;	// The minimum trading volume for a security.
	uInt32 maxTradeVol;	// The maximum trading volume for a security.
	PRICENULL9 minPriceIncrement;	// Minimum constant tick for the instrument
	PRICENULL9 minPriceIncrementAmount;	// Monetary value equivalent to the minimum price fluctuation
	Decimal9 displayFactor;	// Contains the multiplier to convert the CME Globex display price to the conventional price
	sbe::optional<std::int8_t,127> tickRule;	// VTT code referencing variable tick table 
	sbe::optional<std::uint8_t,255U> mainFraction;	// Price Denominator of Main Fraction
	sbe::optional<std::uint8_t,255U> subFraction;	// Price Denominator of Sub Fraction
	sbe::optional<std::uint8_t,255U> priceDisplayFormat;	// Number of decimals in fractional display price
	UnitOfMeasure unitOfMeasure;	// Unit of measure for the products' original contract size. This will be populated for all products listed on CME Globex
	Decimal9NULL unitOfMeasureQty;	// This field contains the contract size for each instrument. Used in combination with tag 996-UnitofMeasure
	PRICENULL9 tradingReferencePrice;	// Reference price - the most recently available Settlement whether it be Theoretical, Preliminary or a Final Settle of the session
	SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
	sbe::optional<std::int32_t,2147483647> clearedVolume;	// The total cleared volume of instrument traded during the prior trading session
	sbe::optional<std::int32_t,2147483647> openInterestQty;	// The total open interest for the market at the close of the prior trading session.
	PRICENULL9 lowLimitPrice;	// Allowable low limit price for the trading day 
	PRICENULL9 highLimitPrice;	// Allowable high limit price for the trading day
	UserDefinedInstrument userDefinedInstrument;	// User-defined instruments flag
	sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates session date corresponding to the settlement price in tag 1150-TradingReferencePrice
	// Number of EventType entries
	struct NoEvents {
		EventType eventType;	// Code to represent the type of event
		uInt64 eventTime;	// Date and Time of instument Activation or Expiration event sent as number of nanoseconds since Unix epoch
	};
	sbe::group<NoEvents,groupSize> noEvents;
	// Number of FeedType entries
	struct NoMDFeedTypes {
		MDFeedType mDFeedType;	// Describes a class of service for a given data feed. GBX- Real Book, GBI-Implied Book
		Int8 marketDepth;	// Book depth
	};
	sbe::group<NoMDFeedTypes,groupSize> noMDFeedTypes;
	// Number of InstrAttribType entries
	struct NoInstAttrib {
		static constexpr std::int8_t instAttribType=24;	// Instrument Eligibility Attributes
		InstAttribValue instAttribValue;	// Bitmap field of 32 Boolean type Instrument eligibility flags
	};
	sbe::group<NoInstAttrib,groupSize> noInstAttrib;
	// Number of entries
	struct NoLotTypeRules {
		Int8 lotType;	// This tag is required to interpret the value in tag 1231-MinLotSize
		DecimalQty minLotSize;	// Minimum quantity accepted for order entry. If tag 1093-LotType=4, this value is the minimum quantity for order entry expressed in the applicable units, specified in tag 996-UnitOfMeasure, e.g. megawatts
	};
	sbe::group<NoLotTypeRules,groupSize> noLotTypeRules;
	// Number of underlying instruments
	struct NoUnderlyings {
		Int32 underlyingSecurityID;	// Unique Instrument ID as qualified by the exchange per tag 305-UnderlyingSecurityIDSource
		static constexpr char underlyingSecurityIDSource='8';	// This value is always '8' for CME
		UnderlyingSymbol underlyingSymbol;	// Underlying Instrument Symbol (Contract Name)
	};
	sbe::group<NoUnderlyings,groupSize> noUnderlyings;
	// Number of related instruments group
	struct NoRelatedInstruments {
		Int32 relatedSecurityID;	// Related Security ID
		static constexpr char relatedSecurityIDSource='8';	// Related Security ID source
		Symbol relatedSymbol;	// Related instrument Symbol
	};
	sbe::group<NoRelatedInstruments,groupSize> noRelatedInstruments;
};

struct MDInstrumentDefinitionSpread56 {
	std::uint16_t msg_size;
	messageHeader message_header;
	MatchEventIndicator matchEventIndicator;	// Bitmap field of eight Boolean type indicators reflecting the end of updates for a given Globex event
	sbe::optional<std::uint32_t,4294967295U> totNumReports;	// Total number of instruments in the Replay loop. Used on Replay Feed only
	SecurityUpdateAction securityUpdateAction;	// Last Security update action on Incremental feed, 'D' or 'M' is used when a mid-week deletion or modification (i.e. extension) occurs
	uInt64 lastUpdateTime;	// Timestamp of when the instrument was last added, modified or deleted
	sbe::optional<SecurityTradingStatus,SecurityTradingStatus::NotPresent> mDSecurityTradingStatus;	// Identifies the current state of the instrument. The data is available in the Instrument Replay feed only
	Int16 applID;	// The channel ID as defined in the XML Configuration file
	uInt8 marketSegmentID;	// Identifies the market segment, populated for all CME Globex instruments
	sbe::optional<std::uint8_t,255U> underlyingProduct;	// Product complex
	SecurityExchange securityExchange;	// Exchange used to identify a security
	SecurityGroup securityGroup;	// Security Group Code
	Asset asset;	// The underlying asset code also known as Product Code
	Symbol symbol;	// Instrument Name or Symbol. Previously used as  Group Code 
	Int32 securityID;	// Unique instrument ID
	static constexpr char securityIDSource='8';	// Identifies class or source of the security ID (Tag 48) value
	SecurityType securityType;	// Security Type
	CFICode cFICode;	// ISO standard instrument categorization code
	MaturityMonthYear maturityMonthYear;	// This field provides the actual calendar date for contract maturity
	Currency currency;	// Identifies currency used for price
	SecuritySubType securitySubType;	// Strategy type
	UserDefinedInstrument userDefinedInstrument;	// User-defined instruments flag
	CHAR matchAlgorithm;	// Matching algorithm
	uInt32 minTradeVol;	// The minimum trading volume for a security
	uInt32 maxTradeVol;	// The maximum trading volume for a security
	PRICENULL9 minPriceIncrement;	// Minimum constant tick for the instrument, sent only if instrument is non-VTT (Variable Tick table) eligible
	Decimal9 displayFactor;	// Contains the multiplier to convert the CME Globex display price to the conventional price
	sbe::optional<std::uint8_t,255U> priceDisplayFormat;	// Number of decimals in fractional display price
	PRICENULL9 priceRatio;	// Used for price calculation in spread and leg pricing
	sbe::optional<std::int8_t,127> tickRule;	// Tick Rule 
	UnitOfMeasure unitOfMeasure;	// Unit of measure for the products' original contract size
	PRICENULL9 tradingReferencePrice;	// Reference price - the most recently available Settlement whether it be Theoretical, Preliminary or a Final Settle of the session
	SettlPriceType settlPriceType;	// Bitmap field of eight Boolean type indicators representing settlement price type
	sbe::optional<std::int32_t,2147483647> openInterestQty;	// The total open interest for the market at the close of the prior trading session
	sbe::optional<std::int32_t,2147483647> clearedVolume;	// The total cleared volume of instrument traded during the prior trading session
	PRICENULL9 highLimitPrice;	// Allowable high limit price for the trading day
	PRICENULL9 lowLimitPrice;	// Allowable low limit price for the trading day
	PRICENULL9 maxPriceVariation;	// Differential value for price banding
	sbe::optional<std::uint8_t,255U> mainFraction;	// Price Denominator of Main Fraction
	sbe::optional<std::uint8_t,255U> subFraction;	// Price Denominator of Sub Fraction
	sbe::optional<std::uint16_t,65535U> tradingReferenceDate;	// Indicates session date corresponding to the settlement price in tag 1150-TradingReferencePrice
	// Number of repeating EventType entries
	struct NoEvents {
		EventType eventType;	// Code to represent the type of event
		uInt64 eventTime;	// Date and time of instument Activation or Expiration event sent as number of nanoseconds since Unix epoch
	};
	sbe::group<NoEvents,groupSize> noEvents;
	// Number of FeedType entries
	struct NoMDFeedTypes {
		MDFeedType mDFeedType;	// Describes a class of service for a given data feed. GBX- Real Book, GBI-Implied Book
		Int8 marketDepth;	// Identifies the depth of book
	};
	sbe::group<NoMDFeedTypes,groupSize> noMDFeedTypes;
	// Number of InstrAttribType entries
	struct NoInstAttrib {
		static constexpr std::int8_t instAttribType=24;	// Instrument Eligibility Attributes
		InstAttribValue instAttribValue;	// Bitmap field of 32 Boolean type Instrument eligibility flags
	};
	sbe::group<NoInstAttrib,groupSize> noInstAttrib;
	// Number of entries
	struct NoLotTypeRules {
		Int8 lotType;	// This tag is required to interpret the value in tag 1231-MinLotSize
		DecimalQty minLotSize;	// Minimum quantity accepted for order entry. If tag 1093-LotType=4, this value is the minimum quantity for order entry expressed in the applicable units, specified in tag 996-UnitOfMeasure, e.g. megawatts
	};
	sbe::group<NoLotTypeRules,groupSize> noLotTypeRules;
	// Number of Leg entries
	struct NoLegs {
		Int32 legSecurityID;	// Leg Security ID
		static constexpr char legSecurityIDSource='8';	// Identifies source of tag 602-LegSecurityID value
		LegSide legSide;	// Leg side
		Int8 legRatioQty;	// Leg ratio of quantity for this individual leg relative to the entire multi-leg instrument
		PRICENULL9 legPrice;	// Price for the future leg of a UDS Covered instrument 
		DecimalQty legOptionDelta;	// Delta used to calculate the quantity of futures used to cover the option or option strategy
	};
	sbe::group<NoLegs,groupSize> noLegs;
};

tc::options<tc::flag::little_endian> protocol_options(...);

using messages = std::variant<
	AdminHeartbeat12,
	AdminLogin15,
	AdminLogout16,
	MDInstrumentDefinitionFuture27,
	MDInstrumentDefinitionSpread29,
	SecurityStatus30,
	MDIncrementalRefreshBook32,
	MDIncrementalRefreshDailyStatistics33,
	MDIncrementalRefreshLimitsBanding34,
	MDIncrementalRefreshSessionStatistics35,
	MDIncrementalRefreshVolume37,
	SnapshotFullRefresh38,
	QuoteRequest39,
	ChannelReset4,
	MDInstrumentDefinitionOption41,
	MDIncrementalRefreshTradeSummary42,
	MDIncrementalRefreshOrderBook43,
	SnapshotFullRefreshOrderBook44,
	MDIncrementalRefreshBook46,
	MDIncrementalRefreshOrderBook47,
	MDIncrementalRefreshTradeSummary48,
	MDIncrementalRefreshDailyStatistics49,
	MDIncrementalRefreshLimitsBanding50,
	MDIncrementalRefreshSessionStatistics51,
	SnapshotFullRefresh52,
	SnapshotFullRefreshOrderBook53,
	MDInstrumentDefinitionFuture54,
	MDInstrumentDefinitionOption55,
	MDInstrumentDefinitionSpread56
>;

struct extended_message_header {
   std::uint16_t msg_size;
   std::uint16_t blockLength;
   std::uint16_t templateId;
   std::uint16_t schemaId;
   std::uint16_t version;
};

} // namespace cme::mdp3::v9

template <> struct tc::type_id<cme::mdp3::v9::messages> { using type = tc::proto_type_id<&cme::mdp3::v9::extended_message_header::templateId>;};

template<> struct tc::type_id<cme::mdp3::v9::AdminHeartbeat12> { constexpr std::uint16_t operator()() const noexcept { return 12;} };
template<> struct tc::type_id<cme::mdp3::v9::AdminLogin15> { constexpr std::uint16_t operator()() const noexcept { return 15;} };
template<> struct tc::type_id<cme::mdp3::v9::AdminLogout16> { constexpr std::uint16_t operator()() const noexcept { return 16;} };
template<> struct tc::type_id<cme::mdp3::v9::MDInstrumentDefinitionFuture27> { constexpr std::uint16_t operator()() const noexcept { return 27;} };
template<> struct tc::type_id<cme::mdp3::v9::MDInstrumentDefinitionSpread29> { constexpr std::uint16_t operator()() const noexcept { return 29;} };
template<> struct tc::type_id<cme::mdp3::v9::SecurityStatus30> { constexpr std::uint16_t operator()() const noexcept { return 30;} };
template<> struct tc::type_id<cme::mdp3::v9::MDIncrementalRefreshBook32> { constexpr std::uint16_t operator()() const noexcept { return 32;} };
template<> struct tc::type_id<cme::mdp3::v9::MDIncrementalRefreshDailyStatistics33> { constexpr std::uint16_t operator()() const noexcept { return 33;} };
template<> struct tc::type_id<cme::mdp3::v9::MDIncrementalRefreshLimitsBanding34> { constexpr std::uint16_t operator()() const noexcept { return 34;} };
template<> struct tc::type_id<cme::mdp3::v9::MDIncrementalRefreshSessionStatistics35> { constexpr std::uint16_t operator()() const noexcept { return 35;} };
template<> struct tc::type_id<cme::mdp3::v9::MDIncrementalRefreshVolume37> { constexpr std::uint16_t operator()() const noexcept { return 37;} };
template<> struct tc::type_id<cme::mdp3::v9::SnapshotFullRefresh38> { constexpr std::uint16_t operator()() const noexcept { return 38;} };
template<> struct tc::type_id<cme::mdp3::v9::QuoteRequest39> { constexpr std::uint16_t operator()() const noexcept { return 39;} };
template<> struct tc::type_id<cme::mdp3::v9::ChannelReset4> { constexpr std::uint16_t operator()() const noexcept { return 4;} };
template<> struct tc::type_id<cme::mdp3::v9::MDInstrumentDefinitionOption41> { constexpr std::uint16_t operator()() const noexcept { return 41;} };
template<> struct tc::type_id<cme::mdp3::v9::MDIncrementalRefreshTradeSummary42> { constexpr std::uint16_t operator()() const noexcept { return 42;} };
template<> struct tc::type_id<cme::mdp3::v9::MDIncrementalRefreshOrderBook43> { constexpr std::uint16_t operator()() const noexcept { return 43;} };
template<> struct tc::type_id<cme::mdp3::v9::SnapshotFullRefreshOrderBook44> { constexpr std::uint16_t operator()() const noexcept { return 44;} };
template<> struct tc::type_id<cme::mdp3::v9::MDIncrementalRefreshBook46> { constexpr std::uint16_t operator()() const noexcept { return 46;} };
template<> struct tc::type_id<cme::mdp3::v9::MDIncrementalRefreshOrderBook47> { constexpr std::uint16_t operator()() const noexcept { return 47;} };
template<> struct tc::type_id<cme::mdp3::v9::MDIncrementalRefreshTradeSummary48> { constexpr std::uint16_t operator()() const noexcept { return 48;} };
template<> struct tc::type_id<cme::mdp3::v9::MDIncrementalRefreshDailyStatistics49> { constexpr std::uint16_t operator()() const noexcept { return 49;} };
template<> struct tc::type_id<cme::mdp3::v9::MDIncrementalRefreshLimitsBanding50> { constexpr std::uint16_t operator()() const noexcept { return 50;} };
template<> struct tc::type_id<cme::mdp3::v9::MDIncrementalRefreshSessionStatistics51> { constexpr std::uint16_t operator()() const noexcept { return 51;} };
template<> struct tc::type_id<cme::mdp3::v9::SnapshotFullRefresh52> { constexpr std::uint16_t operator()() const noexcept { return 52;} };
template<> struct tc::type_id<cme::mdp3::v9::SnapshotFullRefreshOrderBook53> { constexpr std::uint16_t operator()() const noexcept { return 53;} };
template<> struct tc::type_id<cme::mdp3::v9::MDInstrumentDefinitionFuture54> { constexpr std::uint16_t operator()() const noexcept { return 54;} };
template<> struct tc::type_id<cme::mdp3::v9::MDInstrumentDefinitionOption55> { constexpr std::uint16_t operator()() const noexcept { return 55;} };
template<> struct tc::type_id<cme::mdp3::v9::MDInstrumentDefinitionSpread56> { constexpr std::uint16_t operator()() const noexcept { return 56;} };
